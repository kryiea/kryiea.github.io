import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,d as t,e as n,o as l}from"./app-WyckBTYZ.js";const d={};function h(r,i){return l(),e("div",null,[i[0]||(i[0]=a("p",null,"redis 的数据在内存中的组织过程",-1)),t(" more "),i[1]||(i[1]=n(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>本文不对 redis 的数据对象以及底层编码方式作深入展开。 仅是以 <strong>局部到全景</strong> 的思路简单理解 <strong>redis 的数据在内存中的组织过程</strong>。</p><h1 id="推荐学习" tabindex="-1"><a class="header-anchor" href="#推荐学习"><span>推荐学习</span></a></h1><ul><li><a href="https://xiaolincoding.com/redis/" target="_blank" rel="noopener noreferrer">小林coding 图解redis</a></li><li><a href="https://doc.yonyoucloud.com/doc/wiki/project/redis/index.html" target="_blank" rel="noopener noreferrer">Redis 源码日志</a></li></ul><h1 id="一、理解-k-v-在内存中的存储形式" tabindex="-1"><a class="header-anchor" href="#一、理解-k-v-在内存中的存储形式"><span>一、理解 k-v 在内存中的存储形式</span></a></h1><h2 id="_1-1-存储形式为-redisobject" tabindex="-1"><a class="header-anchor" href="#_1-1-存储形式为-redisobject"><span>1.1 存储形式为 redisObject</span></a></h2><p>redis 是 <strong>键值对</strong> 存储，key 和 value 在 redis 中被抽象为redisObject，即对象。</p><ul><li><code>key</code>： 只能是 string 对象。</li><li><code>value</code>： 支持丰富的对象种类，包括：string、list、set、hash、zset等。</li></ul><h2 id="_1-2-redisobject-结构" tabindex="-1"><a class="header-anchor" href="#_1-2-redisobject-结构"><span>1.2 redisObject 结构</span></a></h2><p>重点关注 type 和 encoding 字段。</p><ul><li><code>type</code>：表明是哪种 redis 数据对象。</li><li><code>encoding</code>：表明数据对象的底层编码方式（底层数据结构）。可以看到不同的数据对象，可能采用相同的编码方式。</li></ul><figure><img src="http://images.kryiea.cn/img/2.png" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><h2 id="_1-3-实际例子" tabindex="-1"><a class="header-anchor" href="#_1-3-实际例子"><span>1.3 实际例子</span></a></h2><p>存一条数据，redis 命令：<code>set 我是一个key 1000</code></p><p>redisObject 表现为👇</p><p><strong><code>key = “我是一个key” </code>， Object 的图示（假设用embstr编码）：</strong></p><figure><img src="http://images.kryiea.cn/img/3.png" alt="3" tabindex="0" loading="lazy"><figcaption>3</figcaption></figure><p><strong><code>value = 1000 </code>，Object 的图示（假设用编码int）：</strong></p><figure><img src="http://images.kryiea.cn/img/4.png" alt="4" tabindex="0" loading="lazy"><figcaption>4</figcaption></figure><h2 id="_1-3-redisobject-代码" tabindex="-1"><a class="header-anchor" href="#_1-3-redisobject-代码"><span>1.3 redisObject 代码</span></a></h2><p>除了 type 和 encoding 字段外，</p><ul><li><code>lru</code>：记录对象访问信息，用于内存淘汰（lru、lfu 都复用这个字段）</li><li><code>refcount</code>：引用计数，用来描述有几个指针指向该对象</li><li><code>ptr</code>：内容指针，指向实际数据</li></ul><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// redis 6.0.10</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> redisObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    unsigned</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    unsigned</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lru</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">LRU_BITS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* LRU time (relative to global lru_clock) or</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                            * LFU data (least significant 8 bits frequency</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                            * and most significant 16 bits access time). */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> refcount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    void</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、理解-redisobject-的组织形式" tabindex="-1"><a class="header-anchor" href="#二、理解-redisobject-的组织形式"><span>二、理解 redisObject 的组织形式</span></a></h1><p>从上面了解到 k-v 在内存里的存储形式为 redisObject，那这些 Object 又是被如何组织管理的呢？</p><p><strong>自然是</strong> <code>dict</code></p><h2 id="_2-1-dict-结构" tabindex="-1"><a class="header-anchor" href="#_2-1-dict-结构"><span>2.1 dict 结构</span></a></h2><blockquote><p>简单视角理解 dict 管理 redisObject</p></blockquote><p>简单来说，<strong>dict 是一张哈希表</strong>，Redis 所有的 key-value 都存储在里面。</p><figure><img src="http://images.kryiea.cn/img/dict.png" alt="dict" tabindex="0" loading="lazy"><figcaption>dict</figcaption></figure><blockquote><p>深入一点理解 dict 管理 redisObject</p></blockquote><p>dict 在 redis 中会有更多层的抽象，以便实现更多功能。</p><figure><img src="http://images.kryiea.cn/img/dict+.png" alt="dict+" tabindex="0" loading="lazy"><figcaption>dict+</figcaption></figure><h2 id="_2-2-dict-代码" tabindex="-1"><a class="header-anchor" href="#_2-2-dict-代码"><span>2.2 dict 代码</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 哈希表（字典）数据结构，Redis 的所有键值对都会存储在这里。其中包含两个哈希表。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 哈希表的类型，包括哈希函数，比较函数，键值的内存释放函数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dictType</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 存储一些额外的数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    void</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">privdata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 两个哈希表，先使用ht[0],扩容时启用ht[1]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dictht</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ht</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 哈希表重置下标，指向的是哈希数组的数组下标，扩容时使用。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rehashidx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 绑定到哈希表的迭代器个数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> iterators</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、-理解-dict-的组织形式" tabindex="-1"><a class="header-anchor" href="#三、-理解-dict-的组织形式"><span>三、 理解 dict 的组织形式</span></a></h1><p>dict 管理存储的 redisObject，那谁来组织 dict 呢？ <strong>自然是再上一层的抽象：<code>redisDB</code></strong></p><h2 id="_3-1-redisdb-结构" tabindex="-1"><a class="header-anchor" href="#_3-1-redisdb-结构"><span>3.1 redisDB 结构</span></a></h2><p>redisDB 的重点字段</p><ul><li><code>id</code>：redis 启动时默认开启 16 个 DB，对应<code>0-15</code> 编号。可配置。</li><li><code>dict</code>：指向一个 dict。</li><li><code>expires</code>：指向一个 dict，该 dict 存储<code>含过期时间的 k-v</code>。</li></ul><figure><img src="http://images.kryiea.cn/img/redisdb.png" alt="redisdb" tabindex="0" loading="lazy"><figcaption>redisdb</figcaption></figure><h2 id="_3-2-redisdb-代码" tabindex="-1"><a class="header-anchor" href="#_3-2-redisdb-代码"><span>3.2 redisDb 代码</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> redisDb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;                     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 数据库ID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dict</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;                 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 该数据库的键空间</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dict</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">expires</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;              </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置了超时的键的超时时间</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dict</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">blocking_keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 有客户端等待数据的键（BLPOP）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dict</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ready_keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 接收到PUSH操作的阻塞键</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dict</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">watched_keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 用于MULTI/EXEC CAS的监视键</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> avg_ttl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 平均生存时间（TTL），仅用于统计</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    unsigned</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> expires_cursor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 活跃过期周期的游标。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">defrag_later</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 稍后尝试逐个、逐渐进行碎片整理的键名列表。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、redis-组织形式全景" tabindex="-1"><a class="header-anchor" href="#四、redis-组织形式全景"><span>四、redis 组织形式全景</span></a></h1><p>经过上面对 redisObject、dict、redisDB 的层层理解，对 redis 有了结构化、层次化的理解。</p><p>接下来以全景的视角来看 redis 的组织形式</p><figure><img src="http://images.kryiea.cn/img/redis.drawio.png" alt="redis.drawio" tabindex="0" loading="lazy"><figcaption>redis.drawio</figcaption></figure><p>重点结构：</p><ul><li><code>redisDB</code>：默认是有 0-15 编号，共 16 个 DB ，默认是选择 0 号。</li><li><code>dict</code>：对 hashtable 的一层封装，添加 k-v 的地方</li><li><code>hashtable</code>：对 dictEntry 的一层封装，存有 table 的地址</li><li><code>dictEntry(bucket)</code>：存储 key-value 对象。</li><li><code>redisObject</code>：每个 key 和 value 都表现为一个 redisObject 对象</li></ul><h2 id="_4-1-redis-哈希冲突如何解决" tabindex="-1"><a class="header-anchor" href="#_4-1-redis-哈希冲突如何解决"><span>4.1 redis 哈希冲突如何解决</span></a></h2><p>redis 依靠 dict 哈希表来组织所有的 k-v 对象。</p><p>每次添加 k-v 的时候，需要进行 <code>hash运算</code> 以及 <code>掩码运算</code> 来找到对应的插入位置，这时可能会发生哈希冲突。</p><p>redis 用<code>变种拉链法</code>来解决哈希冲突，全景图的 <code>dictEntry</code> 结构有一个 <code>next</code> 字段，<strong>指向冲突的下一对 k-v</strong></p><figure><img src="http://images.kryiea.cn/img/hash.png" alt="hash" tabindex="0" loading="lazy"><figcaption>hash</figcaption></figure><h2 id="_4-2-redisdb-的-expires" tabindex="-1"><a class="header-anchor" href="#_4-2-redisdb-的-expires"><span>4.2 redisDB 的 expires</span></a></h2><p>在全景图的 <code>redisDB</code> 结构中，可以发现 <code>*dict 、*expires</code> 都是指向一个dict 结构。</p><p>但 expires 所指向的 dict 在组织形式上会有所差异：</p><ul><li>dict 和 expires 中的 key 对象，实际都是存储了 <code>string 对象的指针</code>，所以是不会重复占用内存。</li><li>如果设置了过期时间，key 的指针 在 dict 和 expires 都会存储一份。只是 expires 中 value 指向 timestamp（过期时间），而 dict 的 value 指向实际数据。</li></ul><figure><img src="http://images.kryiea.cn/img/expires.png" alt="expires" tabindex="0" loading="lazy"><figcaption>expires</figcaption></figure>`,59))])}const c=s(d,[["render",h],["__file","dataInMemory.html.vue"]]),g=JSON.parse('{"path":"/back-end/redis/basis/dataInMemory.html","title":"redis数据在内存中的组织过程","lang":"zh-CN","frontmatter":{"title":"redis数据在内存中的组织过程","cover":null,"icon":null,"order":1,"author":null,"category":["redis"],"tag":["redis"],"sticky":false,"star":null,"footer":null,"copyright":null,"description":"redis 的数据在内存中的组织过程","head":[["meta",{"property":"og:url","content":"https://kryiea.cn/kryiea.github.io/back-end/redis/basis/dataInMemory.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"redis数据在内存中的组织过程"}],["meta",{"property":"og:description","content":"redis 的数据在内存中的组织过程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://images.kryiea.cn/img/2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T10:00:52.000Z"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:modified_time","content":"2024-12-04T10:00:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"redis数据在内存中的组织过程\\",\\"image\\":[\\"http://images.kryiea.cn/img/2.png\\",\\"http://images.kryiea.cn/img/3.png\\",\\"http://images.kryiea.cn/img/4.png\\",\\"http://images.kryiea.cn/img/dict.png\\",\\"http://images.kryiea.cn/img/dict+.png\\",\\"http://images.kryiea.cn/img/redisdb.png\\",\\"http://images.kryiea.cn/img/redis.drawio.png\\",\\"http://images.kryiea.cn/img/hash.png\\",\\"http://images.kryiea.cn/img/expires.png\\"],\\"dateModified\\":\\"2024-12-04T10:00:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1 存储形式为 redisObject","slug":"_1-1-存储形式为-redisobject","link":"#_1-1-存储形式为-redisobject","children":[]},{"level":2,"title":"1.2 redisObject 结构","slug":"_1-2-redisobject-结构","link":"#_1-2-redisobject-结构","children":[]},{"level":2,"title":"1.3 实际例子","slug":"_1-3-实际例子","link":"#_1-3-实际例子","children":[]},{"level":2,"title":"1.3 redisObject 代码","slug":"_1-3-redisobject-代码","link":"#_1-3-redisobject-代码","children":[]},{"level":2,"title":"2.1 dict 结构","slug":"_2-1-dict-结构","link":"#_2-1-dict-结构","children":[]},{"level":2,"title":"2.2 dict 代码","slug":"_2-2-dict-代码","link":"#_2-2-dict-代码","children":[]},{"level":2,"title":"3.1 redisDB 结构","slug":"_3-1-redisdb-结构","link":"#_3-1-redisdb-结构","children":[]},{"level":2,"title":"3.2 redisDb 代码","slug":"_3-2-redisdb-代码","link":"#_3-2-redisdb-代码","children":[]},{"level":2,"title":"4.1 redis 哈希冲突如何解决","slug":"_4-1-redis-哈希冲突如何解决","link":"#_4-1-redis-哈希冲突如何解决","children":[]},{"level":2,"title":"4.2 redisDB 的 expires","slug":"_4-2-redisdb-的-expires","link":"#_4-2-redisdb-的-expires","children":[]}],"git":{"createdTime":1733306452000,"updatedTime":1733306452000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":4.59,"words":1377},"filePathRelative":"back-end/redis/basis/dataInMemory.md","localizedDate":"2024年12月4日","excerpt":"<p>redis 的数据在内存中的组织过程</p>\\n","autoDesc":true}');export{c as comp,g as data};
