import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,d as i,e as t,o as l}from"./app-CB9WG6K8.js";const p="/assets/slice.001-DiNkqqfY.png",r="/assets/slice.002-BfBivCRb.png",c="/assets/slice.003-BsIHVZPl.png",o="/assets/slice.004-_QGFKcmv.png",d="/assets/slice.005-C8GgwE9R.png",g="/assets/slice.006-VAky27Tn.png",m="/assets/slice.007-CMvUE-7X.png",h="/assets/slice.008-dyV4Cp8z.png",u="/assets/slice.009-CMuleWme.png",_="/assets/slice.010-KaUjRN4T.png",f={};function v(b,a){return l(),n("div",null,[a[0]||(a[0]=s("p",null,"本文详细介绍Go语言切片(slice)的实现原理和使用方法。",-1)),i(" more "),a[1]||(a[1]=t('<h2 id="_1-切片基本概念" tabindex="-1"><a class="header-anchor" href="#_1-切片基本概念"><span>1. 切片基本概念</span></a></h2><p>切片(slice)可以理解为动态数组，追加元素时，如果切片容量不足，会自动扩容。</p><figure><img src="'+p+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_2-切片的数据结构" tabindex="-1"><a class="header-anchor" href="#_2-切片的数据结构"><span>2. 切片的数据结构</span></a></h2><p>切片在Go语言中由三部分组成：指向底层数组的指针、长度(len)和容量(cap)。</p><figure><img src="'+r+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_3-切片操作" tabindex="-1"><a class="header-anchor" href="#_3-切片操作"><span>3. 切片操作</span></a></h2><h3 id="_3-1-切片初始化" tabindex="-1"><a class="header-anchor" href="#_3-1-切片初始化"><span>3.1 切片初始化</span></a></h3><p>切片可以通过多种方式进行初始化，包括从数组切片、通过make函数等。</p><figure><img src="'+c+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_3-2-切片截取" tabindex="-1"><a class="header-anchor" href="#_3-2-切片截取"><span>3.2 切片截取</span></a></h3><p>切片截取遵循左闭右开原则，即包含开始索引但不包含结束索引。</p><figure><img src="'+o+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_3-3-切片复制" tabindex="-1"><a class="header-anchor" href="#_3-3-切片复制"><span>3.3 切片复制</span></a></h3><p>当我们对切片进行赋值操作时，只复制切片结构，不复制底层数组。</p><figure><img src="'+d+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+g+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_4-切片扩容机制" tabindex="-1"><a class="header-anchor" href="#_4-切片扩容机制"><span>4. 切片扩容机制</span></a></h2><h3 id="_4-1-扩容示例" tabindex="-1"><a class="header-anchor" href="#_4-1-扩容示例"><span>4.1 扩容示例</span></a></h3><p>下面是一个有趣的切片扩容示例：</p><figure><img src="'+m+`" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>解析：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>arr1 slice struct{</span></span>
<span class="line"><span>    array -&gt;////</span></span>
<span class="line"><span>    len = 1</span></span>
<span class="line"><span>    cap = 4</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>[ ] -&gt; [1]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>arr2 slice struct{</span></span>
<span class="line"><span>    array -&gt;////</span></span>
<span class="line"><span>    len = 2</span></span>
<span class="line"><span>    cap = 4</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>[1] -&gt; [1,2] -&gt; [1,3]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>arr3 slice struct{</span></span>
<span class="line"><span>    array -&gt;////</span></span>
<span class="line"><span>    len = 2</span></span>
<span class="line"><span>    cap = 4</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>[1,2] -&gt; [1,3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_4-2-扩容规则" tabindex="-1"><a class="header-anchor" href="#_4-2-扩容规则"><span>4.2 扩容规则</span></a></h3><p>Go语言中切片的扩容规则如下：</p><figure><img src="'+u+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_5-切片完全复制" tabindex="-1"><a class="header-anchor" href="#_5-切片完全复制"><span>5. 切片完全复制</span></a></h2><p>要完全复制一个切片，不仅复制slice结构体，还要复制底层数组，应使用copy函数。</p><p>注意：copy函数复制的数据数量取决于两个切片的len的最小值。</p><figure><img src="'+_+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure>',31))])}const x=e(f,[["render",v],["__file","slice.html.vue"]]),G=JSON.parse('{"path":"/back-end/go/DataStructure/slice.html","title":"Go语言切片详解","lang":"zh-CN","frontmatter":{"title":"Go语言切片详解","description":"详细介绍Go语言slice的实现原理、使用方法及性能优化","date":"2024-01-01T00:00:00.000Z","category":["Go","数据结构"],"tag":["Go","Slice","切片","数组"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/go/DataStructure/slice.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"Go语言切片详解"}],["meta",{"property":"og:description","content":"详细介绍Go语言slice的实现原理、使用方法及性能优化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"Slice"}],["meta",{"property":"article:tag","content":"切片"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言切片详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 切片基本概念","slug":"_1-切片基本概念","link":"#_1-切片基本概念","children":[]},{"level":2,"title":"2. 切片的数据结构","slug":"_2-切片的数据结构","link":"#_2-切片的数据结构","children":[]},{"level":2,"title":"3. 切片操作","slug":"_3-切片操作","link":"#_3-切片操作","children":[{"level":3,"title":"3.1 切片初始化","slug":"_3-1-切片初始化","link":"#_3-1-切片初始化","children":[]},{"level":3,"title":"3.2 切片截取","slug":"_3-2-切片截取","link":"#_3-2-切片截取","children":[]},{"level":3,"title":"3.3 切片复制","slug":"_3-3-切片复制","link":"#_3-3-切片复制","children":[]}]},{"level":2,"title":"4. 切片扩容机制","slug":"_4-切片扩容机制","link":"#_4-切片扩容机制","children":[{"level":3,"title":"4.1 扩容示例","slug":"_4-1-扩容示例","link":"#_4-1-扩容示例","children":[]},{"level":3,"title":"4.2 扩容规则","slug":"_4-2-扩容规则","link":"#_4-2-扩容规则","children":[]}]},{"level":2,"title":"5. 切片完全复制","slug":"_5-切片完全复制","link":"#_5-切片完全复制","children":[]}],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":1.41,"words":424},"filePathRelative":"back-end/go/DataStructure/slice.md","localizedDate":"2024年1月1日","excerpt":"<p>本文详细介绍Go语言切片(slice)的实现原理和使用方法。</p>\\n"}');export{x as comp,G as data};
