import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,d as n,e as r,o as s}from"./app-DRR9Yo7Y.js";const l="/assets/string.001-CqmL2dzS.png",o="/assets/string.002-AUJjlI0s.png",g="/assets/string.003-B013Q_YO.png",p="/assets/string.004-BQ73bxJB.png",c="/assets/string.005-D-ms3n1H.png",d="/assets/string.006-DQJkpnLc.png",h="/assets/string.007-BJV-a4lU.png",_="/assets/string.008-CNUw5-MG.png",m="/assets/string.009-Da9dveJX.png",f="/assets/string.010-vKLAn3dz.png",u="/assets/string.011-BAhIqZSv.png",b="/assets/string.012-CJPsKl8S.png",y="/assets/string.013-DDR5iKLi.png",x={};function k(v,t){return s(),i("div",null,[t[0]||(t[0]=a("p",null,"本文详细介绍Go语言字符串的实现原理和使用方法。",-1)),n(" more "),t[1]||(t[1]=r('<h2 id="_1-字符串基本概念" tabindex="-1"><a class="header-anchor" href="#_1-字符串基本概念"><span>1. 字符串基本概念</span></a></h2><h3 id="_1-1-源代码定义" tabindex="-1"><a class="header-anchor" href="#_1-1-源代码定义"><span>1.1 源代码定义</span></a></h3><p>在sec/builtin/builtin.go中，Go对字符串的定义如下：</p><figure><img src="'+l+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>翻译：</p><ul><li>字符串是所有8bit字节的集合，但不一定是UTF-8编码的文本</li><li>字符串可以是empty但不能是nil，空字符串就是&quot;&quot;没有任何字符</li><li>字符串不可以被修改，所有字符串类型的值都是不可变的</li></ul><h3 id="_1-2-字符串本质" tabindex="-1"><a class="header-anchor" href="#_1-2-字符串本质"><span>1.2 字符串本质</span></a></h3><p>字符串本质是一串字符数组，每个字符在存储时都对应一个整数，也有可能对应多个整数，具体要看字符串的编码方式。</p><figure><img src="'+o+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_2-字符串数据结构" tabindex="-1"><a class="header-anchor" href="#_2-字符串数据结构"><span>2. 字符串数据结构</span></a></h2><p>字符串在Go语言中由两部分组成：指向底层字节数组的指针和长度。</p><figure><img src="'+g+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><ul><li>本例中，len = 5，表示word这个字符串所占的字节数。</li><li>len字段存储的是实际的字节数，而不是字符数，对于非单字节编码的字符，可能len&gt;字符个数</li></ul><h3 id="_2-1-stringstruct的使用" tabindex="-1"><a class="header-anchor" href="#_2-1-stringstruct的使用"><span>2.1 stringStruct的使用</span></a></h3><p>既然runtime里stirng的定义有stringStruct结构，但是平常并没有用到这个结构体，它在哪里被使用了？</p><figure><img src="'+p+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_3-字符串操作" tabindex="-1"><a class="header-anchor" href="#_3-字符串操作"><span>3. 字符串操作</span></a></h2><h3 id="_3-1-string和-byte的相互转换" tabindex="-1"><a class="header-anchor" href="#_3-1-string和-byte的相互转换"><span>3.1 string和[]byte的相互转换</span></a></h3><p>string可以被重新赋值，但是不能被修改：</p><figure><img src="'+c+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>为什么不能以下标的形式修改字符串？</p><figure><img src="'+d+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>可以把字符串转化为字节数组，通过下标修改字节数组，再转化回字符串（实际原来字符串没有变化，而是发生了拷贝）：</p><figure><img src="'+h+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_3-2-转换原理" tabindex="-1"><a class="header-anchor" href="#_3-2-转换原理"><span>3.2 转换原理</span></a></h3><p>string与[]byte转化会发生一次内存拷贝，或申请一块新的切片内存空间。</p><h4 id="byte切片转化为string" tabindex="-1"><a class="header-anchor" href="#byte切片转化为string"><span>byte切片转化为string</span></a></h4><figure><img src="'+_+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h4 id="string转化为byte切片" tabindex="-1"><a class="header-anchor" href="#string转化为byte切片"><span>string转化为byte切片</span></a></h4><figure><img src="'+m+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h4 id="转化是否一定发生内存拷贝" tabindex="-1"><a class="header-anchor" href="#转化是否一定发生内存拷贝"><span>转化是否一定发生内存拷贝</span></a></h4><p>很多场景会用到这个转化，但不是每一次转化都发生上面的内存拷贝。转化为字符串被用于临时场景：</p><figure><img src="'+f+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_4-字符串表示方式" tabindex="-1"><a class="header-anchor" href="#_4-字符串表示方式"><span>4. 字符串表示方式</span></a></h2><p>Go语言中使用字面量来表示字符串有两种方式，双引号和反引号：</p><figure><img src="'+u+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_5-字符串拼接" tabindex="-1"><a class="header-anchor" href="#_5-字符串拼接"><span>5. 字符串拼接</span></a></h2><p>Go语言提供了多种字符串拼接方式，包括+运算符和fmt.Sprintf等：</p><figure><img src="'+b+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_5-1-性能分析" tabindex="-1"><a class="header-anchor" href="#_5-1-性能分析"><span>5.1 性能分析</span></a></h3><p>不同的字符串拼接方式在性能上有所差异：</p><figure><img src="'+y+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure>',42))])}const S=e(x,[["render",k],["__file","string.html.vue"]]),T=JSON.parse('{"path":"/back-end/go/DataStructure/string.html","title":"Go语言字符串详解","lang":"zh-CN","frontmatter":{"title":"Go语言字符串详解","description":"详细介绍Go语言string的实现原理、使用方法及性能优化","date":"2024-01-01T00:00:00.000Z","category":["Go","数据结构"],"tag":["Go","String","字符串","Unicode"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/go/DataStructure/string.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"Go语言字符串详解"}],["meta",{"property":"og:description","content":"详细介绍Go语言string的实现原理、使用方法及性能优化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"字符串"}],["meta",{"property":"article:tag","content":"Unicode"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言字符串详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 字符串基本概念","slug":"_1-字符串基本概念","link":"#_1-字符串基本概念","children":[{"level":3,"title":"1.1 源代码定义","slug":"_1-1-源代码定义","link":"#_1-1-源代码定义","children":[]},{"level":3,"title":"1.2 字符串本质","slug":"_1-2-字符串本质","link":"#_1-2-字符串本质","children":[]}]},{"level":2,"title":"2. 字符串数据结构","slug":"_2-字符串数据结构","link":"#_2-字符串数据结构","children":[{"level":3,"title":"2.1 stringStruct的使用","slug":"_2-1-stringstruct的使用","link":"#_2-1-stringstruct的使用","children":[]}]},{"level":2,"title":"3. 字符串操作","slug":"_3-字符串操作","link":"#_3-字符串操作","children":[{"level":3,"title":"3.1 string和[]byte的相互转换","slug":"_3-1-string和-byte的相互转换","link":"#_3-1-string和-byte的相互转换","children":[]},{"level":3,"title":"3.2 转换原理","slug":"_3-2-转换原理","link":"#_3-2-转换原理","children":[{"level":4,"title":"byte切片转化为string","slug":"byte切片转化为string","link":"#byte切片转化为string","children":[]},{"level":4,"title":"string转化为byte切片","slug":"string转化为byte切片","link":"#string转化为byte切片","children":[]},{"level":4,"title":"转化是否一定发生内存拷贝","slug":"转化是否一定发生内存拷贝","link":"#转化是否一定发生内存拷贝","children":[]}]}]},{"level":2,"title":"4. 字符串表示方式","slug":"_4-字符串表示方式","link":"#_4-字符串表示方式","children":[]},{"level":2,"title":"5. 字符串拼接","slug":"_5-字符串拼接","link":"#_5-字符串拼接","children":[{"level":3,"title":"5.1 性能分析","slug":"_5-1-性能分析","link":"#_5-1-性能分析","children":[]}]}],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":2.26,"words":679},"filePathRelative":"back-end/go/DataStructure/string.md","localizedDate":"2024年1月1日","excerpt":"<p>本文详细介绍Go语言字符串的实现原理和使用方法。</p>\\n"}');export{S as comp,T as data};
