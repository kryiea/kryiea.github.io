import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,e as i,o as n}from"./app-CB9WG6K8.js";const l="/assets/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E3%80%81%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.001-BRtwOOwM.png",r={};function a(p,t){return n(),o("div",null,t[0]||(t[0]=[i('<p><strong>读写分离、主从同步</strong></p><p><strong>一、读写分离概念</strong></p><ul><li>主库：处理新增、修改、删除等事务性操作。</li><li>从库：处理 SELECT 查询操作</li></ul><p><strong>二、主从同步过程</strong></p><figure><img src="'+l+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><ol><li><strong>写入 binlog</strong>： 主库修改数据后，写入 binlog 日志，提交事务，更新本地存储的数据。</li><li><strong>同步 binlog</strong>：从库连接到主库后，主库会创建一个 dump 线程，把 binlog 同步到所有从库，每个从库把 binlog 写到暂存日志中。</li><li><strong>回放 binlog</strong>：从库启动一个 sql 线程去回放 binlog，去读 relay log 中继日志然后回放 binlog 更新数据。</li></ol><p><strong>三、同步模式</strong></p><p>mysql 默认的同步模式：异步模式</p><ul><li>同步模式：主库提交事务的线程要等待所有从库的同步成功，才返回客户端结果。性能最差了。</li><li>异步模式：主库提交事务的线程不会等待 binlog 同步完成就返回客户端结果，性能最好，但是主库宕机，数据就会丢失。</li><li>半同步模式：比如一主二从的集群，只要成功同步到一个从库，就立即返回数据给客户端。即使主库宕机，仍有一个从库有最新数据。</li></ul><p><strong>四、主从复制的数据延迟怎么解决</strong></p><ul><li><p>使用缓存：在写入数据主库的同时，把数据写到 redis 缓存里面。这样其它线程（比同步从库的 dump 线程，因为写入缓存速度快，所以可以从缓存拿数据同步从库，不用从主库拿数据。）获取数据的时候会优先查询缓存，但是可能带来缓存一致性问题。</p></li><li><p>直接查询主库：杜宇数据延迟敏感的业务，可以强制读主库。但是前提是查询的数据量不大，不然会出现主库写请求锁行，影响读请求的执行，最终对主库造成较大的压力。</p></li></ul><p><strong>五、主从架构中，读写分离怎么实现</strong></p><p>独立部署代理中间件 mycat 来实现。</p><p><strong>六、主库掉了怎么办</strong></p><p>由于 mysql 没有像 redis 集群的哨兵模式可以自动将从库升级为主库，所以 MySQL 主从复制没有实现发现主服务器宕机和处理故障迁移的功能，要实现真的主从故障转移的话，简单了解过，可以用开源的 MySQL 高可用套件 MHA。</p><p>MHA 可以在主数据库发生宕机时，可以剔除原有主机，选出新的主机，然后对外提供服务，保证业务的连续性。</p>',16)]))}const c=e(r,[["render",a],["__file","读写分离、主从同步.html.vue"]]),m=JSON.parse('{"path":"/back-end/mysql/High-availability/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E3%80%81%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.html","title":"MySQL读写分离与主从同步详解","lang":"zh-CN","frontmatter":{"title":"MySQL读写分离与主从同步详解","description":"深入解析MySQL读写分离架构和主从同步机制的实现原理","date":"2024-01-01T00:00:00.000Z","category":["数据库","MySQL"],"tag":["MySQL","读写分离","主从同步","高可用"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/mysql/High-availability/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E3%80%81%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"MySQL读写分离与主从同步详解"}],["meta",{"property":"og:description","content":"深入解析MySQL读写分离架构和主从同步机制的实现原理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"读写分离"}],["meta",{"property":"article:tag","content":"主从同步"}],["meta",{"property":"article:tag","content":"高可用"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL读写分离与主从同步详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":2.41,"words":722},"filePathRelative":"back-end/mysql/High-availability/读写分离、主从同步.md","localizedDate":"2024年1月1日","excerpt":"<p><strong>读写分离、主从同步</strong></p>\\n<p><strong>一、读写分离概念</strong></p>\\n<ul>\\n<li>主库：处理新增、修改、删除等事务性操作。</li>\\n<li>从库：处理 SELECT 查询操作</li>\\n</ul>\\n<p><strong>二、主从同步过程</strong></p>\\n<figure><figcaption>...</figcaption></figure>\\n<ol>\\n<li><strong>写入 binlog</strong>： 主库修改数据后，写入 binlog 日志，提交事务，更新本地存储的数据。</li>\\n<li><strong>同步 binlog</strong>：从库连接到主库后，主库会创建一个 dump 线程，把 binlog 同步到所有从库，每个从库把 binlog 写到暂存日志中。</li>\\n<li><strong>回放 binlog</strong>：从库启动一个 sql 线程去回放 binlog，去读 relay log 中继日志然后回放 binlog 更新数据。</li>\\n</ol>"}');export{c as comp,m as data};
