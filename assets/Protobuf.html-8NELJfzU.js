import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as e}from"./app-CB9WG6K8.js";const t="/assets/Protobuf.001-CRJVJYOM.jpeg",l={};function p(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<p><strong>Protobuf</strong></p><p><a href="https://www.liwenzhou.com/posts/Go/protobuf/" target="_blank" rel="noopener noreferrer">protocol buffers使用指南 - 李文周的博客</a></p><p><a href="https://lessisbetter.site/2019/08/26/protobuf-in-go/" target="_blank" rel="noopener noreferrer">Go是如何实现protobuf的编解码的(1)：原理</a></p><p><strong>Protobuf 对比 Json</strong></p><p>假设要描述一个人，他拥有name、age和sex三个属性，可以怎么表示呢？</p><p>Json可以很清晰的描述</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Taylor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;sex&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;female&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>ProtoBuf</p><p>但是像&quot;name&quot;、&quot;age和&quot;sex&quot;这样的key占用了将近一半的内存，这是无法忍受的。</p><p>能不能通过定义一种消息格式，<strong>例如用1表示name，2表示age，3表示sex呢?</strong></p><p>这当然是可以的，ProtoBuf通过定义 .proto 文件，提供一种与语言、平台无关的机制来实现对数据的序列化，并且比Json更快，占用的内存更小。</p><p><strong>数据被序列化为一种紧凑、向前和向后兼容、但不可自我描述的二进制线性格式（binary wire format）</strong></p><p><strong>.proto 文件</strong></p><p><strong>ProtoBuf将协议保存在.proto文件中，编译器在运行的时候会调用该文件，生成各种编程语言的代码。</strong></p><p>对于上面例子中的person，用protoBuf描述如下：</p><ul><li>第一行，指定了ProtoBuf的版本，也就是proto3，如果没有指定，则默认是proto2。</li><li>接下来定义了一个message类型的Person（可以理解为C#中的类），里面包含几个字段，在使用编译器编译后，message会变成对应语言的对象，比如C#中的Class。</li><li>这些字段都是以 <strong>type fieldName = fieldNumbe</strong>r 格式定义的，</li></ul><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">syntax = &quot;proto3&quot;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//定义proto版本，不显示表明，默认是 proto2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int32</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Sex</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">       male</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">       female</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    Sex</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>支持的数据类型</strong></p><p><strong>repeated表示一个字段可以包含零个或多个值，类似于数组或列表的概念</strong></p><p><strong>1. 标量值类型 - Scalar value type</strong></p><p><strong>默认值不能设置为null</strong></p><figure><img src="`+t+`" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p><strong>点击图片可查看完整电子表格</strong></p><p><strong>2. 枚举 - Enum</strong></p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Gender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    FEMALE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    MALE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  Gender</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gender</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  repeated</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int32</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> scores</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>枚举类型的<strong>第一个选项的标识符必须是0</strong>，这也是枚举类型的默认值。</li><li>别名（Alias），允许为不同的枚举值赋予相同的标识符，称之为别名，需要打开allow_alias选项。</li></ul><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumAllowAlias</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    option allow\\_alias = true;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    UNKOWN</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    STARTED</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    RUNNING</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 任意类型 - Any</strong></p><p>Any 可以表示不在 .proto 中定义任意的内置类型。</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;google/protobuf/any.proto&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ErrorStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  repeated</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> google.protobuf.Any</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> details</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. oneof</strong></p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SampleMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  oneof</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\_oneof {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SubMessage sub\\_message = 9;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. map</strong></p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MapRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">points</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6. 其他消息类型</strong></p><p>Result是另一个消息类型，在 SearchReponse 作为一个消息字段类型使用。</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SearchResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  repeated</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Result</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> results</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> title</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  repeated</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> snippets</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以嵌套使用</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SearchResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> title</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    repeated</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> snippets</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  repeated</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Result</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> results</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Protobuf 语法</strong></p><p><strong>packages</strong></p><p><strong>对于Go，包可以被用做Go包名称，除非你显式的提供一个option go_package在你的.proto文件中。</strong></p><p>可以向 .proto 文件添加一个可选package说明符，以防止协议消息类型之间的名称冲突。</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> foo.bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { ... }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，你可以在定义消息类型的字段时使用package说明符:</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  foo.bar.Open</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>定义服务</strong></p><p>如果消息类型是用来远程通信的(Remote Procedure Call, RPC)，可以在 .proto 文件中定义 RPC 服务接口。</p><p>例如我们定义了一个名为 SearchService 的 RPC 服务，提供了 Search 接口，入参是 SearchRequest 类型，返回类型是 SearchResponse</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" data-title="protobuf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">service</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SearchService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rpc</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SearchRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">returns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SearchResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>官方仓库也提供了一个<a href="https://github.com/protocolbuffers/protobuf/blob/master/docs/third_party.md" target="_blank" rel="noopener noreferrer">插件列表</a>，帮助开发基于 Protocol Buffer 的 RPC 服务。</p><p><strong>生产 go 代码</strong></p><p><strong>编译器调用</strong></p><p><strong>protocol buffer 编译器需要借助一个插件来根据提供的 proto 文件生成 Go 代码</strong></p><p>Go1.16+请使用下面的命令安装插件。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">go</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> install</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> google</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">golang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">org</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">protobuf</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cmd</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">protoc</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gen</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">go</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>这个命令将在 $GOBIN 中安装一个 protocol-gen-go 的二进制文件。</p></li><li><p>我们需要确保 $GOBIN 在你的环境变量中，protocol buffer编译器才能找到它（可以通过go env命令查看$GOPATH）。</p></li><li><p>当使用go_out标志调用 protoc 时，protocol buffer编译器将生成 Go 代码。</p></li><li><p>protocol buffer编译器会将生成的Go代码输出到命令行参数go_out指定的位置。</p></li><li><p>go_out标志的参数是你希望编译器编写 Go 输出的目录。</p></li><li><p>编译器为每个.proto 文件输入创建一个源文件。</p></li><li><p>输出文件的名称是通过将.proto 扩展名替换为.pb.go而创建的。</p></li></ul><p>生成的.pb.go文件放置的目录取决于编译器标志。</p><ul><li><strong>有以下几种输出模式:</strong></li><li>paths=import：输出文件放在以 Go 包的导入路径命名的目录中。</li><li>例如：protos/buzz.proto文件中带有example.com/project/protos/fizz的导入路径，则输出的生成文件会保存在example.com/project/protos/fizz/buzz.pb.go。</li><li>如果未指定路径标志，这就是默认输出模式。</li><li>module=$PREFIX：输出文件放在以 Go 包的导入路径命名的目录中，但是从输出文件名中删除了指定的目录前缀。</li><li>例如，输入文件 pros/buzz.proto，其导入路径为 example.com/project/protos/fizz 并指定example.com/project为module前缀，结果会产生一个名为 pros/fizz/buzz.pb.go 的输出文件。</li><li>在module路径之外生成任何 Go 包都会导致错误。此模式对于将生成的文件直接输出到 Go 模块非常有用。</li><li>paths=source_relative：输出文件与输入文件放在相同的相对目录中。</li><li>例如，一个protos/buzz.proto输入文件会产生一个位于protos/buzz.pb.go的输出文件。</li></ul><p>go_opt标志位参数</p><p>在调用protoc时，通过传递 go_opt标志来提供特定于 protocol-gen-go 的标志位参数。可以传递多个go_opt标志位参数。</p><p>例如，当执行下面的命令时：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protoc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --proto</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">path=src</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --go</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">out=out</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --go</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">opt=paths=source</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> foo.proto</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bar/baz.proto</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译器将从 src 目录中读取输入文件 foo.proto 和 bar/baz.proto，并将输出文件 foo.pb.go 和 bar/baz.pb.go 写入 out 目录。如果需要，编译器会自动创建嵌套的输出子目录，但不会创建输出目录本身。</p><p><strong>package</strong></p><p>为了生成 Go 代码，必须为每个.proto 文件（包括那些被生成的 .proto 文件传递依赖的文件）提供 Go 包的导入路径。</p><p>有两种方法可以指定 Go 导入路径：</p><ol><li><code></code>通过在 .proto 文件中声明它。</li><li><code></code>通过在调用 protoc 时在命令行上声明它。</li></ol><p>建议在 .proto 文件中声明它，以便 .proto 文件的 Go 包可以与 .proto 文件本身集中标识，并简化调用 protoc 时传递的标志集。</p><p>如果给定 .proto 文件的 Go 导入路径由 .proto 文件本身和命令行提供，则后者优先于前者。</p><p>Go 导入路径是在 .proto 文件中指定的，通过声明带有 Go 包的完整导入路径的 go_package 选项来创建 proto 文件。用法示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">option</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> go</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\_</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;example.com/project/protos/fizz&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>调用编译器时，可以在命令行上指定 Go 导入路径，方法是传递一个或多个 M\${PROTO_FILE}=\${GO_IMPORT_PATH} 标志位。</p><p>用法示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protoc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --proto</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">path=src</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --go</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">opt=Mprotos/buzz.proto=example.com/project/protos/fizz</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --go</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">opt=Mprotos/bar.proto=example.com/project/protos/foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  protos/buzz.proto</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> protos/bar.proto</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于所有 .proto 文件到其 Go 导入路径的映射可能非常大，这种指定 Go 导入路径的模式通常由控制整个依赖树的某些构建工具（例如 Bazel）执行。 如果给定的 .proto 文件有重复条目，则指定的最后一个条目优先。</p><p>导入路径用于确定一个 .proto 文件导入另一个 .proto 文件时必须生成哪些导入语句。</p><p><code></code>例如，如果 a.proto 导入 b.proto，则生成的 a.pb.go 文件需要导入包含生成的 b.pb.go 文件的 Go 包（除非两个文件在同一个包中）。 导入路径也用于构造输出文件名。</p><p>Go 导入路径和 .proto 文件中的package说明符之间没有关联。</p><p>后者仅与 protobuf 命名空间相关，而前者仅与 Go 命名空间相关。 此外，Go 导入路径和 .proto 导入路径之间没有关联。</p>`,80)]))}const o=i(l,[["render",p],["__file","Protobuf.html.vue"]]),d=JSON.parse('{"path":"/back-end/microservice/Protobuf.html","title":"Protocol Buffers详解","lang":"zh-CN","frontmatter":{"title":"Protocol Buffers详解","description":"详细介绍Protocol Buffers的概念、使用方法及在微服务中的应用","date":"2024-01-01T00:00:00.000Z","category":["微服务","协议"],"tag":["Protobuf","微服务","序列化","RPC"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/microservice/Protobuf.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"Protocol Buffers详解"}],["meta",{"property":"og:description","content":"详细介绍Protocol Buffers的概念、使用方法及在微服务中的应用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"Protobuf"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"序列化"}],["meta",{"property":"article:tag","content":"RPC"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Protocol Buffers详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":6.98,"words":2095},"filePathRelative":"back-end/microservice/Protobuf.md","localizedDate":"2024年1月1日","excerpt":"<p><strong>Protobuf</strong></p>\\n<p><a href=\\"https://www.liwenzhou.com/posts/Go/protobuf/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">protocol buffers使用指南 - 李文周的博客</a></p>\\n<p><a href=\\"https://lessisbetter.site/2019/08/26/protobuf-in-go/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Go是如何实现protobuf的编解码的(1)：原理</a></p>"}');export{o as comp,d as data};
