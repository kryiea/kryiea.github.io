import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,d as l,e as n,o as r}from"./app-CB9WG6K8.js";const s="/assets/%E4%BA%8B%E5%8A%A1.001-DCRbnJr6.png",o="/assets/%E4%BA%8B%E5%8A%A1.002-DL0E6tKk.jpeg",d="/assets/%E4%BA%8B%E5%8A%A1.003-B8LcHwTr.png",c="/assets/%E4%BA%8B%E5%8A%A1.004-C4WHOiK1.png",p="/assets/%E4%BA%8B%E5%8A%A1.005-BLGg2FPh.png",h={};function g(_,e){return r(),a("div",null,[e[0]||(e[0]=i("h1",{id:"mysql事务机制详解",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#mysql事务机制详解"},[i("span",null,"MySQL事务机制详解")])],-1)),e[1]||(e[1]=i("p",null,"MySQL事务是数据库操作的基本单位，能够保证数据的一致性和完整性。本文详细介绍事务的ACID特性、隔离级别以及实现原理。",-1)),l(" more "),e[2]||(e[2]=n('<h2 id="_1-事务的acid特性" tabindex="-1"><a class="header-anchor" href="#_1-事务的acid特性"><span>1. 事务的ACID特性</span></a></h2><ul><li><strong>原子性（Atomicity）</strong>：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li><strong>一致性（Consistency）</strong>：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。</li><li><strong>隔离性（Isolation）</strong>：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。</li><li><strong>持久性（Durability）</strong>：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><h3 id="_1-1-innodb-如何保证-acid" tabindex="-1"><a class="header-anchor" href="#_1-1-innodb-如何保证-acid"><span>1.1 InnoDB 如何保证 ACID</span></a></h3><ul><li><strong>A：undo log（回滚日志）</strong></li><li><strong>I：MVCC（多版本并发控制）</strong></li><li><strong>D：redo log（重做日志）</strong></li><li><strong>C：A+I+D</strong></li></ul><h2 id="_2-并行事务引发的问题" tabindex="-1"><a class="header-anchor" href="#_2-并行事务引发的问题"><span>2. 并行事务引发的问题</span></a></h2><p>MySQL 支持多客户端连接，可能出现同时处理多个事务的情况。以下是并行事务可能引发的问题，按严重性排序：</p><figure><img src="'+s+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_2-1-脏读-dirty-read" tabindex="-1"><a class="header-anchor" href="#_2-1-脏读-dirty-read"><span>2.1 脏读 (Dirty Read)</span></a></h3><p><strong>一个事务读到了另一个已修改的数据但是未提交事务，就会发生脏读。</strong></p><p>或者说，读到了过期数据。</p><h3 id="_2-2-不可重复读-non-repeatable-read" tabindex="-1"><a class="header-anchor" href="#_2-2-不可重复读-non-repeatable-read"><span>2.2 不可重复读 (Non-repeatable Read)</span></a></h3><p><strong>在一个事务内，多次读取同一个数据，出现了前后两次读到的数据不一样的情况，就发生了不可重复读。</strong></p><h3 id="_2-3-幻读-phantom-read" tabindex="-1"><a class="header-anchor" href="#_2-3-幻读-phantom-read"><span>2.3 幻读 (Phantom Read)</span></a></h3><p><strong>在一个事务内，多次查询某个条件下的记录数量，如果出现了前后两次查询的记录数量不一样，就发生了幻读。</strong></p><h4 id="_2-3-1-幻读的另一种解释" tabindex="-1"><a class="header-anchor" href="#_2-3-1-幻读的另一种解释"><span>2.3.1 幻读的另一种解释</span></a></h4><p>假设此时平台要升级，用户表中的性别字段，原本是以「男、女」的形式保存数据，现在平台升级后要求改为「0、1」代替。</p><ul><li><strong>事务A开始</strong>更改表中所有数据的性别字段，当负责执行事务A的线程正在更改最后一条表数据时</li><li>**此时事务B来了，**正好向用户表中插入了一条「性别=男」的数据并提交了</li><li><strong>然后事务A</strong>改完原本的最后一条数据后，当再次去查询用户表时，结果会发现表中依旧还存在一条「性别=男」的数据，似乎又产生了<strong>幻觉一样</strong></li></ul><h2 id="_3-事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-事务隔离级别"><span>3. 事务隔离级别</span></a></h2><h3 id="_3-1-四种隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-1-四种隔离级别"><span>3.1 四种隔离级别</span></a></h3><ol><li><strong>RU：read uncommitted</strong>（读未提交）</li><li><strong>RC：read committed</strong>（读已提交）</li><li><strong>RR：repeatable read</strong>（可重复读）</li><li><strong>Serializable</strong>（串行化）</li></ol><figure><img src="'+o+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_3-2-mysql-默认-rr-是否解决幻读" tabindex="-1"><a class="header-anchor" href="#_3-2-mysql-默认-rr-是否解决幻读"><span>3.2 MySQL 默认 RR 是否解决幻读</span></a></h3><p><strong>回答：并不是完全解决了</strong></p><ul><li>针对 <strong>快照读</strong>（普通 select 语句），是 <strong>通过 MVCC 方式解决了幻读</strong><ul><li>因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。</li></ul></li><li>针对 <strong>当前读</strong>（select ... for update 等语句），是 <strong>通过 next-key lock（记录锁+间隙锁）方式解决了幻读</strong><ul><li>因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题</li></ul></li></ul><h3 id="_3-3-四种隔离级别的实现方式" tabindex="-1"><a class="header-anchor" href="#_3-3-四种隔离级别的实现方式"><span>3.3 四种隔离级别的实现方式</span></a></h3><ul><li>**「读未提交」：**因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好</li><li>**「串行化」：**通过加读写锁的方式来避免并行访问</li><li><strong>「读提交」和「可重复读」：</strong> 通过 Read View 来实现的，区别在于创建 Read View 的时机不同 <ul><li>「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View</li><li>「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View</li></ul></li></ul><h3 id="_3-4-开启事务命令的区别" tabindex="-1"><a class="header-anchor" href="#_3-4-开启事务命令的区别"><span>3.4 开启事务命令的区别</span></a></h3><p>两种事务开启命令：</p><ol><li>begin/start transaction</li><li>start transaction with consistent snapshot</li></ol><p>开启时机：</p><ul><li>执行了 begin/start transaction 命令后，并不代表事务启动了。 只有在执行这个命令后，执行了第一条 select 语句，才是事务真正启动的时机；</li><li>执行了 start transaction with consistent snapshot 命令，就会马上启动事务。</li></ul><h2 id="_4-mvcc-机制" tabindex="-1"><a class="header-anchor" href="#_4-mvcc-机制"><span>4. MVCC 机制</span></a></h2><p><strong>通过「版本链」来控制并发事务访问同一个记录时的行为就叫 MVCC（多版本并发控制）</strong></p><h3 id="_4-1-read-view-的四个字段" tabindex="-1"><a class="header-anchor" href="#_4-1-read-view-的四个字段"><span>4.1 Read View 的四个字段</span></a></h3><figure><img src="'+d+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><ul><li>creator_trx_id：代表创建当前这个ReadView的事务ID。</li><li>m_ids：表示在生成当前ReadView时，系统内活跃且未提交的事务 ID列表。</li><li>min_trx_id：活跃的事务列表中，最小的事务ID。</li><li>max_trx_id：表示在生成当前ReadView时，系统中要给下一个事务分配的ID值</li></ul><h3 id="_4-2-聚集索引记录中和事务有关的两个隐藏列" tabindex="-1"><a class="header-anchor" href="#_4-2-聚集索引记录中和事务有关的两个隐藏列"><span>4.2 聚集索引记录中和事务有关的两个隐藏列</span></a></h3><ul><li>隐藏列不止两个，以下是与事务相关的两个隐藏列：</li><li>trx_id：当一个事务对某条聚簇索引记录进行改动时，就会把该事务的事务 id 记录在 trx_id 隐藏列里；</li><li>roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧版本的记录写入到 undo 日志中，这个隐藏列是个指针，指向每一个旧版本记录，于是就可以通过它找到修改前的记录。</li></ul><figure><img src="'+c+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_4-3-事务访问数据的可见性判断" tabindex="-1"><a class="header-anchor" href="#_4-3-事务访问数据的可见性判断"><span>4.3 事务访问数据的可见性判断</span></a></h3><p><strong>判定方法 --- 事务 read view 里的字段与记录中的两个隐藏列进行对比：</strong></p><ul><li>如果记录的 trx_id 值小于 Read View 中的 min_trx_id 值，表示这个版本的记录是在创建 Read View <strong>前</strong> 已经提交的事务生成的，所以该版本的记录对当前事务 <strong>可见</strong>。</li><li>如果记录的 trx_id 值大于等于 Read View 中的 max_trx_id 值，表示这个版本的记录是在创建 Read View <strong>后</strong> 才启动的事务生成的，所以该版本的记录对当前事务 <strong>不可见</strong>。</li><li>如果记录的 trx_id 值在 Read View 的 min_trx_id 和 max_trx_id 之间，需要判断 trx_id 是否在 m_ids 列表中： <ul><li>如果记录的 trx_id <strong>在</strong> m_ids 列表中，表示生成该版本记录的活跃事务依然活跃着（还没提交事务），所以该版本的记录对当前事务 <strong>不可见</strong>。</li><li>如果记录的 trx_id <strong>不在</strong> m_ids 列表中，表示生成该版本记录的活跃事务已经被提交，所以该版本的记录对当前事务 <strong>可见</strong>。</li></ul></li></ul><h2 id="_5-可重复读与幻读问题" tabindex="-1"><a class="header-anchor" href="#_5-可重复读与幻读问题"><span>5. 可重复读与幻读问题</span></a></h2><h3 id="_5-1-可重复读的工作原理" tabindex="-1"><a class="header-anchor" href="#_5-1-可重复读的工作原理"><span>5.1 可重复读的工作原理</span></a></h3><p><strong>可重复读隔离级别是：启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View</strong></p><h3 id="_5-2-可重复读是否完全解决幻读" tabindex="-1"><a class="header-anchor" href="#_5-2-可重复读是否完全解决幻读"><span>5.2 可重复读是否完全解决幻读</span></a></h3><p><strong>虽然是 MySQL 默认隔离级别，但是没有完全解决幻读</strong></p><h4 id="_5-2-1-幻读场景1" tabindex="-1"><a class="header-anchor" href="#_5-2-1-幻读场景1"><span>5.2.1 幻读场景1</span></a></h4><figure><img src="'+p+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><ol><li>事务 A 执行查询 id = 5 的记录，此时表中是没有该记录的，所以查询不出来。</li><li>事务 B 插入一条 id = 5 的记录，并且提交了事务。</li><li><strong>事务 A 更新 id = 5 这条记录，对没错，事务 A 看不到 id = 5 这条记录，但是他去更新了这条记录，这场景确实很违和，然后再次查询 id = 5 的记录，事务 A 就能看到事务 B 插入的纪录了，幻读就是发生在这种违和的场景</strong>。</li></ol><p>解释：</p><ul><li>在可重复读隔离级别下，事务 A 第一次执行普通的 select 语句时生成了一个 ReadView，之后事务 B 向表中新插入了一条 id = 5 的记录并提交。</li><li>接着，事务 A 对 id = 5 这条记录进行了更新操作，在这个时刻，这条新记录的 trx_id 隐藏列的值就变成了事务 A 的事务 id，之后事务 A 再使用普通 select 语句去查询这条记录时就可以看到这条记录了，于是就发生了幻读。</li></ul><p>因为这种特殊现象的存在，所以我们认为 <strong>MySQL Innodb 中的 MVCC 并不能完全避免幻读现象</strong></p><h4 id="_5-2-2-幻读场景2" tabindex="-1"><a class="header-anchor" href="#_5-2-2-幻读场景2"><span>5.2.2 幻读场景2</span></a></h4><ul><li>T1 时刻：事务 A 先执行「快照读语句」：select * from t_test where id &gt; 100 得到了 3 条记录。</li><li>T2 时刻：事务 B 往插入一个 id= 200 的记录并提交；</li><li>T3 时刻：事务 A 再执行「当前读语句」 select * from t_test where id &gt; 100 for update 就会得到 4 条记录，此时也发生了幻读现象。</li></ul><h3 id="_5-3-解决幻读的方法" tabindex="-1"><a class="header-anchor" href="#_5-3-解决幻读的方法"><span>5.3 解决幻读的方法</span></a></h3><p><strong>要避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select ... for update 这类当前读的语句，会触发 Next-Key 锁</strong></p><h2 id="_6-读提交隔离级别的工作原理" tabindex="-1"><a class="header-anchor" href="#_6-读提交隔离级别的工作原理"><span>6. 读提交隔离级别的工作原理</span></a></h2><p><strong>读提交隔离级别是：在每次读取数据时，都会生成一个新的 Read View</strong></p>',59))])}const y=t(h,[["render",g],["__file","事务.html.vue"]]),f=JSON.parse('{"path":"/back-end/mysql/principle/%E4%BA%8B%E5%8A%A1.html","title":"MySQL事务机制详解","lang":"zh-CN","frontmatter":{"title":"MySQL事务机制详解","description":"详细介绍MySQL事务的ACID特性、隔离级别及实现原理","date":"2024-01-01T00:00:00.000Z","category":["数据库","MySQL"],"tag":["MySQL","事务","ACID","隔离级别"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/mysql/principle/%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"MySQL事务机制详解"}],["meta",{"property":"og:description","content":"详细介绍MySQL事务的ACID特性、隔离级别及实现原理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"事务"}],["meta",{"property":"article:tag","content":"ACID"}],["meta",{"property":"article:tag","content":"隔离级别"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL事务机制详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 事务的ACID特性","slug":"_1-事务的acid特性","link":"#_1-事务的acid特性","children":[{"level":3,"title":"1.1 InnoDB 如何保证 ACID","slug":"_1-1-innodb-如何保证-acid","link":"#_1-1-innodb-如何保证-acid","children":[]}]},{"level":2,"title":"2. 并行事务引发的问题","slug":"_2-并行事务引发的问题","link":"#_2-并行事务引发的问题","children":[{"level":3,"title":"2.1 脏读 (Dirty Read)","slug":"_2-1-脏读-dirty-read","link":"#_2-1-脏读-dirty-read","children":[]},{"level":3,"title":"2.2 不可重复读 (Non-repeatable Read)","slug":"_2-2-不可重复读-non-repeatable-read","link":"#_2-2-不可重复读-non-repeatable-read","children":[]},{"level":3,"title":"2.3 幻读 (Phantom Read)","slug":"_2-3-幻读-phantom-read","link":"#_2-3-幻读-phantom-read","children":[{"level":4,"title":"2.3.1 幻读的另一种解释","slug":"_2-3-1-幻读的另一种解释","link":"#_2-3-1-幻读的另一种解释","children":[]}]}]},{"level":2,"title":"3. 事务隔离级别","slug":"_3-事务隔离级别","link":"#_3-事务隔离级别","children":[{"level":3,"title":"3.1 四种隔离级别","slug":"_3-1-四种隔离级别","link":"#_3-1-四种隔离级别","children":[]},{"level":3,"title":"3.2 MySQL 默认 RR 是否解决幻读","slug":"_3-2-mysql-默认-rr-是否解决幻读","link":"#_3-2-mysql-默认-rr-是否解决幻读","children":[]},{"level":3,"title":"3.3 四种隔离级别的实现方式","slug":"_3-3-四种隔离级别的实现方式","link":"#_3-3-四种隔离级别的实现方式","children":[]},{"level":3,"title":"3.4 开启事务命令的区别","slug":"_3-4-开启事务命令的区别","link":"#_3-4-开启事务命令的区别","children":[]}]},{"level":2,"title":"4. MVCC 机制","slug":"_4-mvcc-机制","link":"#_4-mvcc-机制","children":[{"level":3,"title":"4.1 Read View 的四个字段","slug":"_4-1-read-view-的四个字段","link":"#_4-1-read-view-的四个字段","children":[]},{"level":3,"title":"4.2 聚集索引记录中和事务有关的两个隐藏列","slug":"_4-2-聚集索引记录中和事务有关的两个隐藏列","link":"#_4-2-聚集索引记录中和事务有关的两个隐藏列","children":[]},{"level":3,"title":"4.3 事务访问数据的可见性判断","slug":"_4-3-事务访问数据的可见性判断","link":"#_4-3-事务访问数据的可见性判断","children":[]}]},{"level":2,"title":"5. 可重复读与幻读问题","slug":"_5-可重复读与幻读问题","link":"#_5-可重复读与幻读问题","children":[{"level":3,"title":"5.1 可重复读的工作原理","slug":"_5-1-可重复读的工作原理","link":"#_5-1-可重复读的工作原理","children":[]},{"level":3,"title":"5.2 可重复读是否完全解决幻读","slug":"_5-2-可重复读是否完全解决幻读","link":"#_5-2-可重复读是否完全解决幻读","children":[{"level":4,"title":"5.2.1 幻读场景1","slug":"_5-2-1-幻读场景1","link":"#_5-2-1-幻读场景1","children":[]},{"level":4,"title":"5.2.2 幻读场景2","slug":"_5-2-2-幻读场景2","link":"#_5-2-2-幻读场景2","children":[]}]},{"level":3,"title":"5.3 解决幻读的方法","slug":"_5-3-解决幻读的方法","link":"#_5-3-解决幻读的方法","children":[]}]},{"level":2,"title":"6. 读提交隔离级别的工作原理","slug":"_6-读提交隔离级别的工作原理","link":"#_6-读提交隔离级别的工作原理","children":[]}],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":8.25,"words":2475},"filePathRelative":"back-end/mysql/principle/事务.md","localizedDate":"2024年1月1日","excerpt":"\\n<p>MySQL事务是数据库操作的基本单位，能够保证数据的一致性和完整性。本文详细介绍事务的ACID特性、隔离级别以及实现原理。</p>\\n"}');export{y as comp,f as data};
