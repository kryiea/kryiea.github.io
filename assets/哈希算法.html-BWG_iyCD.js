import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as l,d as i,e as n,o as r}from"./app-DRR9Yo7Y.js";const p={};function h(s,e){return r(),t("div",null,[e[0]||(e[0]=l("p",null,"本文详细介绍哈希算法的定义、原理及其广泛的应用场景。",-1)),i(" more "),e[1]||(e[1]=n('<h2 id="_1-哈希算法基础" tabindex="-1"><a class="header-anchor" href="#_1-哈希算法基础"><span>1. 哈希算法基础</span></a></h2><h3 id="_1-1-定义" tabindex="-1"><a class="header-anchor" href="#_1-1-定义"><span>1.1 定义</span></a></h3><p>将任意长度的二进制值串映射为固定长度的二进制值串，这个映射的规则就是哈希算法，而通过原始数据映射之后得到的二进制值串就是哈希值。</p><h2 id="_2-哈希算法应用" tabindex="-1"><a class="header-anchor" href="#_2-哈希算法应用"><span>2. 哈希算法应用</span></a></h2><h3 id="_2-1-安全加密" tabindex="-1"><a class="header-anchor" href="#_2-1-安全加密"><span>2.1 安全加密</span></a></h3><p>哈希算法有很多，但对于用于加密的哈希算法来说，有两点格外重要：</p><ul><li>很难逆推原始数据</li><li>hash冲突概率小</li></ul><h4 id="常见的加密算法" tabindex="-1"><a class="header-anchor" href="#常见的加密算法"><span>常见的加密算法</span></a></h4><ul><li>MD5 消息摘要算法</li><li>SHA 安全散列算法</li><li>DES 数据加密标准</li><li>AES 高级加密标准</li></ul><h4 id="鸽巢原理" tabindex="-1"><a class="header-anchor" href="#鸽巢原理"><span>鸽巢原理</span></a></h4><p>没有绝对安全的加密。越复杂、越难破解的加密算法，需要的计算时间也越长。</p><p>哈希算法因哈希值长度有限而无法避免冲突，但因其冲突概率极低在有限资源下很难破解，且实际开发中要权衡加密算法的破解难度和计算时间来选择合适算法。</p><h3 id="_2-2-唯一标识" tabindex="-1"><a class="header-anchor" href="#_2-2-唯一标识"><span>2.2 唯一标识</span></a></h3><p>如果要在海量的图库中，搜索一张图是否存在，我们不能单纯地用图片的元信息（比如图片名称）来比对，因为有可能存在名称相同但图片内容不同，或者名称不同图片内容相同的情况。</p><p>任何文件在计算中都可以表示成二进制码串，所以，比较笨的办法就是，拿要查找的图片的二进制码串与图库中所有图片的二进制码串一一比对。</p><p>以给每一个图片取一个唯一标识，或者说信息摘要。</p><p>比如，我们可以从图片的二进制码串开头取 100 个字节，从中间取 100 个字节，从最后再取 100 个字节，然后将这 300 个字节放到一块，通过哈希算法（比如 MD5），得到一个哈希字符串，用它作为图片的唯一标识。</p><p>通过这个唯一标识来判定图片是否在图库中，这样就可以减少很多工作量。</p><h3 id="_2-3-数据检验" tabindex="-1"><a class="header-anchor" href="#_2-3-数据检验"><span>2.3 数据检验</span></a></h3><p>网络传输文件的时候往往会分片成一个个文件块，等所有文件快下载完成后，在合成一个完整的文件，如何检验文件块的安全、正确、完整？</p><p>传输前对每个文件块分别取哈希值，传输完成后用同一个哈希算法计算，对比两次哈希值。</p><h3 id="_2-4-分布式问题-负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-4-分布式问题-负载均衡"><span>2.4 分布式问题：负载均衡</span></a></h3><p>负载均衡算法有很多，比如轮询、随机、加权轮询等。</p><p>我们需要在同一个客户端上，在一次会话中的所有请求都路由到同一个服务器上。</p><p>通过哈希算法，对客户端 IP 地址或者会话 ID 计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。</p><h3 id="_2-5-数据分片" tabindex="-1"><a class="header-anchor" href="#_2-5-数据分片"><span>2.5 数据分片</span></a></h3><h4 id="如何统计-关键词-出现的次数" tabindex="-1"><a class="header-anchor" href="#如何统计-关键词-出现的次数"><span>如何统计&quot;关键词&quot;出现的次数？</span></a></h4><p>在1TB的日志文件里记录了用户的搜索关键词，快速统计每个关键字被搜索的次数。</p><p>两个难点，第一个是文件大，没有办法一次性放入一台机器的内存中处理；第二个是如果只用一台机器来处理这么巨大的数据，时间久。</p><p>针对这两个难点，可以先对数据进行分片，然后采用多台机器处理，提高处理速度。</p><p>具体思路：</p><ol><li>在整个数据处理的前期准备阶段，就已经规划好通过某种方式让每台机器都能获取到一部分分片后的日志数据。</li><li>每台机器都会从分配给自己的那部分日志数据中依次读取每个搜索关键词，然后各自在本机上对读取到的关键词进行哈希函数运算，得到哈希值后再与 n 取模，以此确定这个关键词应该在本机进行后续处理还是要发送给其他机器。</li><li>一台机器确定某个关键词是要在自己这里处理（也就是取模结果对应的是本机编号）时，它就会对收到的这个关键词进行计数统计。如果之前没出现过，就初始化为 1 次；如果已经出现过了，就把对应的计数加 1。</li><li>在每台机器都完成了对各自所负责的那部分数据中的关键词的统计处理之后，再通过特定的机制将每台机器统计出来的结果进行合并汇总，最终得到整个 1T 日志文件中每个关键词被搜索的总次数。</li></ol><h4 id="如何快速判断图片是否在图库中" tabindex="-1"><a class="header-anchor" href="#如何快速判断图片是否在图库中"><span>如何快速判断图片是否在图库中？</span></a></h4><p>这个问题可以通过哈希算法给每张图片生成唯一标识，然后通过分布式存储系统快速检索。</p><h3 id="_2-6-分布式存储" tabindex="-1"><a class="header-anchor" href="#_2-6-分布式存储"><span>2.6 分布式存储</span></a></h3><p>分布式缓存。我们有海量的数据需要缓存，所以一个缓存机器肯定是不够的。于是，我们就需要将数据分布在多台机器上。</p><p>该如何决定将哪个数据放到哪个机器上呢？我们可以借用前面数据分片的思想，即通过哈希算法对数据取哈希值，然后对机器个数取模，这个最终值就是应该存储的缓存机器编号。</p><h4 id="一致性哈希算法" tabindex="-1"><a class="header-anchor" href="#一致性哈希算法"><span>一致性哈希算法</span></a></h4><p>一致性哈希算法是解决分布式系统中数据分布问题的一种重要方法，特别适用于节点动态变化的场景。</p>',39))])}const d=a(p,[["render",h],["__file","哈希算法.html.vue"]]),_=JSON.parse('{"path":"/back-end/algorithm/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95.html","title":"哈希算法详解","lang":"zh-CN","frontmatter":{"title":"哈希算法详解","description":"详细介绍哈希算法的原理、常见哈希函数及应用场景","date":"2024-01-01T00:00:00.000Z","category":["算法","密码学"],"tag":["哈希","算法","密码学"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/algorithm/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"哈希算法详解"}],["meta",{"property":"og:description","content":"详细介绍哈希算法的原理、常见哈希函数及应用场景"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"哈希"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"密码学"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"哈希算法详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 哈希算法基础","slug":"_1-哈希算法基础","link":"#_1-哈希算法基础","children":[{"level":3,"title":"1.1 定义","slug":"_1-1-定义","link":"#_1-1-定义","children":[]}]},{"level":2,"title":"2. 哈希算法应用","slug":"_2-哈希算法应用","link":"#_2-哈希算法应用","children":[{"level":3,"title":"2.1 安全加密","slug":"_2-1-安全加密","link":"#_2-1-安全加密","children":[{"level":4,"title":"常见的加密算法","slug":"常见的加密算法","link":"#常见的加密算法","children":[]},{"level":4,"title":"鸽巢原理","slug":"鸽巢原理","link":"#鸽巢原理","children":[]}]},{"level":3,"title":"2.2 唯一标识","slug":"_2-2-唯一标识","link":"#_2-2-唯一标识","children":[]},{"level":3,"title":"2.3 数据检验","slug":"_2-3-数据检验","link":"#_2-3-数据检验","children":[]},{"level":3,"title":"2.4 分布式问题：负载均衡","slug":"_2-4-分布式问题-负载均衡","link":"#_2-4-分布式问题-负载均衡","children":[]},{"level":3,"title":"2.5 数据分片","slug":"_2-5-数据分片","link":"#_2-5-数据分片","children":[{"level":4,"title":"如何统计\\"关键词\\"出现的次数？","slug":"如何统计-关键词-出现的次数","link":"#如何统计-关键词-出现的次数","children":[]},{"level":4,"title":"如何快速判断图片是否在图库中？","slug":"如何快速判断图片是否在图库中","link":"#如何快速判断图片是否在图库中","children":[]}]},{"level":3,"title":"2.6 分布式存储","slug":"_2-6-分布式存储","link":"#_2-6-分布式存储","children":[{"level":4,"title":"一致性哈希算法","slug":"一致性哈希算法","link":"#一致性哈希算法","children":[]}]}]}],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":5.09,"words":1526},"filePathRelative":"back-end/algorithm/哈希算法.md","localizedDate":"2024年1月1日","excerpt":"<p>本文详细介绍哈希算法的定义、原理及其广泛的应用场景。</p>\\n"}');export{d as comp,_ as data};
