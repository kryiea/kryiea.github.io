import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as o,d as l,e as a,o as r}from"./app-ELrWzSVy.js";const n={};function p(c,e){return r(),i("div",null,[e[0]||(e[0]=o("p",null,"了解Go语言的编译大致过程。",-1)),l(" more "),e[1]||(e[1]=a('<h2 id="go-编译器" tabindex="-1"><a class="header-anchor" href="#go-编译器"><span>Go 编译器</span></a></h2><p><code>.go</code>为后缀的<code>UTF-8</code>格式的<code>Go文本文件</code>，<code>.go</code>最终能被编译成特定机器上的<code>可执行文件</code>，离不开<strong>Go语言编译器</strong>的复杂工作。</p><h3 id="一般编译器" tabindex="-1"><a class="header-anchor" href="#一般编译器"><span>一般编译器</span></a></h3><ul><li>一般将编译器分为：编译器前端、优化器、编译器后端。这种编译器被称为三阶段编译器（three-phase compiler）</li></ul><figure><img src="http://images.kryiea.cn/img/1707147903867.jpg" alt="1707147903867" tabindex="0" loading="lazy"><figcaption>1707147903867</figcaption></figure><ul><li><strong>编译器前端</strong>：主要专注于理解源程序、扫描解析源程序并进行精准的语义表达。</li><li><strong>编译器的中间阶段 （Intermediate Representation，IR）</strong>：可能有多个，编译器会使用多个IR阶段、多种数据结构表示代码，并在中间阶段对代码进行多次优化。例如，识别冗余代码、识别内存逃逸等。编译器的中间阶段离不开编译器前端记录的细节。</li><li><strong>编译器后端</strong>：专注于生成特定目标机器上的程序，这种程序可能是可执行文件，也可能是需要进一步处理的中间形态obj文件、汇编语言等。</li></ul><h3 id="go-编译器-1" tabindex="-1"><a class="header-anchor" href="#go-编译器-1"><span>Go 编译器</span></a></h3><ul><li>Go语言编译器一般缩写为小写的<strong>gc（go compiler）</strong>，需要和大写的**GC（垃圾回收）**进行区分。</li><li>Go语言的编译器遵循了主流编译器采用的经典策略及相似的处理流程和优化规则（例如经典的递归下降的语法解析、抽象语法树的构建）。</li><li>另外，Go语言编译器有一些特殊的设计，如内存的逃逸等</li></ul><blockquote><p>编译器执行流程</p></blockquote><figure><img src="http://images.kryiea.cn/img/1707147895527.jpg" alt="1707147895527" tabindex="0" loading="lazy"><figcaption>1707147895527</figcaption></figure><blockquote><p>编译器相关源代码位置</p></blockquote><p>Go 语言编译器有关的代码主要位于 <code>go/src/cmd/compile/internal</code> 目录下： <img src="http://images.kryiea.cn/img/20240205233832.png" alt="20240205233832" loading="lazy"></p><h2 id="第一阶段-词法分析和语法分析" tabindex="-1"><a class="header-anchor" href="#第一阶段-词法分析和语法分析"><span>第一阶段：词法分析和语法分析</span></a></h2><ul><li><p><code>cmd/compile/internal/syntax</code>（词法分析器，解析器，语法树）</p></li><li><p>在编译的第一阶段，源代码被 token 化（词法分析），解析（语法分析），并为每个源构造语法树文件。</p></li><li><p>每个语法树都是相应源文件的精确表示，对应于源的各种元素的节点，如表达式，声明和陈述。</p></li><li><p>语法树还包括位置信息用于错误报告和调试信息的创建。</p></li></ul><h2 id="第二阶段-语义分析" tabindex="-1"><a class="header-anchor" href="#第二阶段-语义分析"><span>第二阶段：语义分析</span></a></h2><ul><li><p><code>cmd/compile/internal/gc</code>（类型检查，AST变换）</p></li><li><p><strong>对 AST 进行类型检查</strong>：第一步是名称解析和类型推断，它们确定哪个对象属于哪个标识符，以及每个表达式具有的类型。类型检查包括某些额外的检查，例如 “声明和未使用” 以及确定函数是否终止。</p></li><li><p><strong>在 AST 上也进行了某些转换</strong>：一些节点基于类型信息被细化，死代码消除，函数调用内联和转义分析。</p></li><li><p><strong>语义分析的过程中包含几个重要的操作</strong>：逃逸分析、变量捕获、函数内联、闭包处理。</p></li></ul><h2 id="第三阶段-ssa-生成" tabindex="-1"><a class="header-anchor" href="#第三阶段-ssa-生成"><span>第三阶段：SSA 生成</span></a></h2><ul><li><p><code>cmd/compile/internal/gc</code> (转换为SSA)</p></li><li><p><code>cmd/compile/internal/ssa</code>(SSA 传递与规则)</p></li><li><p>在此阶段，<strong>抽象语法树（AST）会被转换成静态单赋值（SSA）形式</strong>。<strong>SSA是一种低级别的中间表示法，具有便于实施优化和生成机器代码的特性。</strong></p></li><li><p>在转换过程中，编译器能够识别并将代码中的特定函数替换为高效的代码片段。</p></li><li><p>在AST转换为SSA的过程中，一些节点会简化为更基本的元素，以便编译器的其他部分可以更容易地使用。例如，内置的复制操作会被替换为内存移动操作，而范围循环则被改写成for循环。</p></li><li><p>接下来，会执行一系列与具体机器无关的优化步骤和规则。这些步骤和规则不特定于任何一种计算机架构，因此它们适用于所有的GOARCH变体。</p></li><li><p>这些通用优化过程包括移除死代码、消除不必要的零值检查、以及删除未使用的代码分支。通用的重写规则主要关注表达式，比如用常数替换特定表达式，优化乘法和浮点运算。</p></li></ul><h2 id="第四阶段-机器码生成" tabindex="-1"><a class="header-anchor" href="#第四阶段-机器码生成"><span>第四阶段：机器码生成</span></a></h2><ul><li><p><code>cmd/compile/internal/ssa</code> (底层SSA和架构特定的传递)</p></li><li><p><code>cmd/internal/obj</code> (生成机器码)</p></li><li><p>编译器的机器相关阶段从“底层”传递开始，此过程将通用值转换成特定于机器的形式。例如，在amd64架构中，可以合并多个加载和存储操作，因为其内存操作数具有这样的能力。</p></li><li><p>需要注意的是，这一底层阶段执行了所有针对特定机器的重写规则，同时也实施了大量的优化措施。</p></li><li><p>当SSA被“降低”至更贴近目标体系结构后，便会启动<strong>最终的代码优化过程</strong>。这个过程包括进行另一轮的死代码消除、将值移动至更接近其使用点的位置、删除从未被读取的局部变量，以及进行寄存器分配。</p></li><li><p>此阶段的其他重要任务包括堆栈框架的布局，这一步骤为局部变量分配堆栈偏移量，并进行指针活动分析，计算每个垃圾收集（GC）安全点上的堆栈指针情况。</p></li><li><p><strong>在SSA生成阶段完成时</strong>，Go函数已被转换成一系列的obj.Prog指令。这些指令随后被传递给装载器<code>cmd/internal/obj</code>，<strong>装载器将它们转换为机器代码，并生成最终的目标文件</strong>。目标文件除了包含机器代码外，还包括反射数据、导出数据和调试信息。</p></li></ul>',20))])}const g=t(n,[["render",p],["__file","Compiler.html.vue"]]),m=JSON.parse('{"path":"/back-end/go/feature/Compiler.html","title":"Go大致编译过程","lang":"zh-CN","frontmatter":{"title":"Go大致编译过程","cover":null,"icon":null,"order":2,"author":"kryiea","date":"2024-11-27T00:00:00.000Z","category":["Go"],"tag":["编译器"],"sticky":false,"star":null,"footer":null,"copyright":null,"description":"了解Go语言的编译大致过程。","head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/go/feature/Compiler.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"Go大致编译过程"}],["meta",{"property":"og:description","content":"了解Go语言的编译大致过程。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://images.kryiea.cn/img/1707147903867.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T10:00:52.000Z"}],["meta",{"property":"article:author","content":"kryiea"}],["meta",{"property":"article:tag","content":"编译器"}],["meta",{"property":"article:published_time","content":"2024-11-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T10:00:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go大致编译过程\\",\\"image\\":[\\"http://images.kryiea.cn/img/1707147903867.jpg\\",\\"http://images.kryiea.cn/img/1707147895527.jpg\\",\\"http://images.kryiea.cn/img/20240205233832.png\\"],\\"datePublished\\":\\"2024-11-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-04T10:00:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\"}]}"]]},"headers":[{"level":2,"title":"Go 编译器","slug":"go-编译器","link":"#go-编译器","children":[{"level":3,"title":"一般编译器","slug":"一般编译器","link":"#一般编译器","children":[]},{"level":3,"title":"Go 编译器","slug":"go-编译器-1","link":"#go-编译器-1","children":[]}]},{"level":2,"title":"第一阶段：词法分析和语法分析","slug":"第一阶段-词法分析和语法分析","link":"#第一阶段-词法分析和语法分析","children":[]},{"level":2,"title":"第二阶段：语义分析","slug":"第二阶段-语义分析","link":"#第二阶段-语义分析","children":[]},{"level":2,"title":"第三阶段：SSA 生成","slug":"第三阶段-ssa-生成","link":"#第三阶段-ssa-生成","children":[]},{"level":2,"title":"第四阶段：机器码生成","slug":"第四阶段-机器码生成","link":"#第四阶段-机器码生成","children":[]}],"git":{"createdTime":1732734930000,"updatedTime":1733306452000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":2}]},"readingTime":{"minutes":5.18,"words":1554},"filePathRelative":"back-end/go/feature/Compiler.md","localizedDate":"2024年11月27日","excerpt":"<p>了解Go语言的编译大致过程。</p>\\n","autoDesc":true}');export{g as comp,m as data};
