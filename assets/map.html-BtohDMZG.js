import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,d as p,e as n,o as l}from"./app-CB9WG6K8.js";const r="/assets/map.001-EQk-ATg3.png",s="/assets/map.002-D4g3PxoU.png",o="/assets/map.003-VAqc65D1.png",c="/assets/map.004-BGj24jbK.png",m="/assets/map.005-DPboHEIE.png",g="/assets/map.006-BqzcaMeD.png",h="/assets/map.007-DDP8OCOO.png",d="/assets/map.008-m-derr1E.png",_="/assets/map.009-xHom6vnc.png",f="/assets/map.010-HOCot1gi.png",u="/assets/map.011-DJV4QgyP.png",b="/assets/map.012-Dus04JrR.png",y="/assets/map.013-DNJ_FDMl.png",x="/assets/map.014-CVwZvYZo.png",k="/assets/map.015-BmABpjh0.png",v="/assets/map.016-DYyGVFIF.png",z={};function M(G,a){return l(),t("div",null,[a[0]||(a[0]=i("p",null,"本文详细介绍Go语言map的底层实现原理和使用方法。",-1)),p(" more "),a[1]||(a[1]=n('<h2 id="_1-map概念基础" tabindex="-1"><a class="header-anchor" href="#_1-map概念基础"><span>1. Map概念基础</span></a></h2><p>Go语言中的map是一种哈希表实现，用于存储键值对数据。Go中map底层采用哈希表，用变种拉链法来解决哈希冲突问题。</p><h3 id="_1-1-哈希冲突" tabindex="-1"><a class="header-anchor" href="#_1-1-哈希冲突"><span>1.1 哈希冲突</span></a></h3><p>哈希冲突是指不同的键计算出相同的哈希值：</p><figure><img src="'+r+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_1-2-解决哈希冲突的方法" tabindex="-1"><a class="header-anchor" href="#_1-2-解决哈希冲突的方法"><span>1.2 解决哈希冲突的方法</span></a></h3><h4 id="拉链法" tabindex="-1"><a class="header-anchor" href="#拉链法"><span>拉链法</span></a></h4><p>拉链法通过链表结构来解决哈希冲突：</p><figure><img src="'+s+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h4 id="开放地址法" tabindex="-1"><a class="header-anchor" href="#开放地址法"><span>开放地址法</span></a></h4><p>开放地址法通过探测空闲位置来解决哈希冲突：</p><figure><img src="'+o+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_2-map底层数据结构" tabindex="-1"><a class="header-anchor" href="#_2-map底层数据结构"><span>2. Map底层数据结构</span></a></h2><h3 id="_2-1-整体结构" tabindex="-1"><a class="header-anchor" href="#_2-1-整体结构"><span>2.1 整体结构</span></a></h3><ul><li>map是一个指向hmap的指针，该指针占用8个字节</li><li>hmap是一个结构体，包含多个bucket数组（但并不是只有bucket）</li><li>bucket数组的元素为bmap结构体，通过链表结构把bmap结构体连接起来</li><li>一个bmap结构体能存放8个键值对，而不是一个</li></ul><figure><img src="'+c+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_2-2-hmap结构体" tabindex="-1"><a class="header-anchor" href="#_2-2-hmap结构体"><span>2.2 hmap结构体</span></a></h3><p>hmap是map的主要数据结构：</p><figure><img src="'+m+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>字段含义：</p><figure><img src="'+g+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_2-3-mapextra结构体" tabindex="-1"><a class="header-anchor" href="#_2-3-mapextra结构体"><span>2.3 mapextra结构体</span></a></h3><p>mapextra包含了一些额外的字段：</p><figure><img src="'+h+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>字段含义：</p><figure><img src="'+d+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_2-4-bmap结构体" tabindex="-1"><a class="header-anchor" href="#_2-4-bmap结构体"><span>2.4 bmap结构体</span></a></h3><p>hmap真正存储数据的是buckets指向的bmap（桶）数组：</p><figure><img src="'+_+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>字段含义：</p><figure><img src="'+f+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_3-map工作原理" tabindex="-1"><a class="header-anchor" href="#_3-map工作原理"><span>3. Map工作原理</span></a></h2><h3 id="_3-1-tophash机制" tabindex="-1"><a class="header-anchor" href="#_3-1-tophash机制"><span>3.1 tophash机制</span></a></h3><ol><li>map会根据每一个key算出一个hash值</li><li>hash值是一分为二使用的，分成：高位、低位</li></ol><figure><img src="'+u+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>tophash就存放高8位。</p><p>在上面的map底层结构图可以看到，bmap显示存储了8个tophash值，然后存储了8个键值对。</p><p>注意：</p><ul><li>这8个键值对不是按照key + value这样key和value一起存储的。而是先存完连续的8个key，再存连续的8个value</li><li>当键值对不够8个时，对应位置留空，这样子存储的好处是可以消除字节对齐带来的空间浪费</li></ul><h3 id="_3-2-map访问原理" tabindex="-1"><a class="header-anchor" href="#_3-2-map访问原理"><span>3.2 Map访问原理</span></a></h3><p>Map提供两种访问方式：</p><figure><img src="'+b+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>访问步骤：</p><figure><img src="'+y+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_3-3-map赋值原理" tabindex="-1"><a class="header-anchor" href="#_3-3-map赋值原理"><span>3.3 Map赋值原理</span></a></h3><p>Map赋值操作：</p><figure><img src="'+x+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>赋值流程：</p><figure><img src="'+k+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+v+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_4-参考资料" tabindex="-1"><a class="header-anchor" href="#_4-参考资料"><span>4. 参考资料</span></a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/495998623" target="_blank" rel="noopener noreferrer">Go Map底层实现原理</a></li><li><a href="https://segmentfault.com/a/1190000040716956" target="_blank" rel="noopener noreferrer">为什么 Go map 和 slice 是非线程安全的？</a></li></ul>',52))])}const Z=e(z,[["render",M],["__file","map.html.vue"]]),B=JSON.parse('{"path":"/back-end/go/DataStructure/map.html","title":"Go语言Map详解","lang":"zh-CN","frontmatter":{"title":"Go语言Map详解","description":"详细介绍Go语言map的实现原理、使用方法及性能优化","date":"2024-01-01T00:00:00.000Z","category":["Go","数据结构"],"tag":["Go","Map","哈希表","键值对"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/go/DataStructure/map.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"Go语言Map详解"}],["meta",{"property":"og:description","content":"详细介绍Go语言map的实现原理、使用方法及性能优化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"Map"}],["meta",{"property":"article:tag","content":"哈希表"}],["meta",{"property":"article:tag","content":"键值对"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言Map详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1. Map概念基础","slug":"_1-map概念基础","link":"#_1-map概念基础","children":[{"level":3,"title":"1.1 哈希冲突","slug":"_1-1-哈希冲突","link":"#_1-1-哈希冲突","children":[]},{"level":3,"title":"1.2 解决哈希冲突的方法","slug":"_1-2-解决哈希冲突的方法","link":"#_1-2-解决哈希冲突的方法","children":[{"level":4,"title":"拉链法","slug":"拉链法","link":"#拉链法","children":[]},{"level":4,"title":"开放地址法","slug":"开放地址法","link":"#开放地址法","children":[]}]}]},{"level":2,"title":"2. Map底层数据结构","slug":"_2-map底层数据结构","link":"#_2-map底层数据结构","children":[{"level":3,"title":"2.1 整体结构","slug":"_2-1-整体结构","link":"#_2-1-整体结构","children":[]},{"level":3,"title":"2.2 hmap结构体","slug":"_2-2-hmap结构体","link":"#_2-2-hmap结构体","children":[]},{"level":3,"title":"2.3 mapextra结构体","slug":"_2-3-mapextra结构体","link":"#_2-3-mapextra结构体","children":[]},{"level":3,"title":"2.4 bmap结构体","slug":"_2-4-bmap结构体","link":"#_2-4-bmap结构体","children":[]}]},{"level":2,"title":"3. Map工作原理","slug":"_3-map工作原理","link":"#_3-map工作原理","children":[{"level":3,"title":"3.1 tophash机制","slug":"_3-1-tophash机制","link":"#_3-1-tophash机制","children":[]},{"level":3,"title":"3.2 Map访问原理","slug":"_3-2-map访问原理","link":"#_3-2-map访问原理","children":[]},{"level":3,"title":"3.3 Map赋值原理","slug":"_3-3-map赋值原理","link":"#_3-3-map赋值原理","children":[]}]},{"level":2,"title":"4. 参考资料","slug":"_4-参考资料","link":"#_4-参考资料","children":[]}],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":2.15,"words":645},"filePathRelative":"back-end/go/DataStructure/map.md","localizedDate":"2024年1月1日","excerpt":"<p>本文详细介绍Go语言map的底层实现原理和使用方法。</p>\\n"}');export{Z as comp,B as data};
