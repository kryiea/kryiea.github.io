import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,d as i,e as o,o as c}from"./app-DRR9Yo7Y.js";const r="/assets/context.001-CCiU5lTC.png",l="/assets/context.002-B-kX09NG.png",s="/assets/context.003-CBn-NdiS.png",p="/assets/context.004-B9uLBpzR.png",g="/assets/context.005-CbETfivU.png",x="/assets/context.006-DdcoBF_t.png",d="/assets/context.007-fhHOYm7H.png",f="/assets/context.008-_nosqAIR.png",_="/assets/context.009-C8a266_8.png",m="/assets/context.010-QLk_Shr-.png",h="/assets/context.011-B_9wY5IB.png",u="/assets/context.012-Cl_wFFDy.png",y="/assets/context.013-BlC3usRP.png",C="/assets/context.014-BqUtdYi1.png",b="/assets/context.015-CVMyjhr0.png",k="/assets/context.016-Cm54Nfsl.png",z="/assets/context.017-lm4B8RBe.png",v="/assets/context.018-C0Et3Wel.png",G="/assets/context.019-Y27Ml1Sk.png",B="/assets/context.020-9995l0iF.png",T="/assets/context.021-CoAySafC.png",N="/assets/context.022-DGhZCrFx.png",S={};function D(Z,t){return c(),a("div",null,[t[0]||(t[0]=n("p",null,"本文详细介绍Go语言Context的底层实现原理和使用方法。",-1)),i(" more "),t[1]||(t[1]=o('<h2 id="_1-context简介" tabindex="-1"><a class="header-anchor" href="#_1-context简介"><span>1. Context简介</span></a></h2><p>Context是Go语言中用于控制goroutine的一种机制，常用于处理请求的超时、取消以及传递请求相关的值。</p><figure><img src="'+r+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_2-context的底层实现" tabindex="-1"><a class="header-anchor" href="#_2-context的底层实现"><span>2. Context的底层实现</span></a></h2><p>Context在底层用到了2个接口，对这个接口有4种实现，以及提供了6个方法。</p><h3 id="_2-1-接口定义" tabindex="-1"><a class="header-anchor" href="#_2-1-接口定义"><span>2.1 接口定义</span></a></h3><p>Context的核心接口定义：</p><figure><img src="'+l+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_2-2-实现类型" tabindex="-1"><a class="header-anchor" href="#_2-2-实现类型"><span>2.2 实现类型</span></a></h3><p>Context有四种基本实现类型：</p><figure><img src="'+s+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_2-3-提供的方法" tabindex="-1"><a class="header-anchor" href="#_2-3-提供的方法"><span>2.3 提供的方法</span></a></h3><p>Context包提供了以下几个方法用于创建和操作Context：</p><figure><img src="'+p+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_3-接口详解" tabindex="-1"><a class="header-anchor" href="#_3-接口详解"><span>3. 接口详解</span></a></h2><h3 id="_3-1-context接口" tabindex="-1"><a class="header-anchor" href="#_3-1-context接口"><span>3.1 Context接口</span></a></h3><p>Context接口定义了四个必须实现的方法：</p><figure><img src="'+g+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_3-2-canceler接口" tabindex="-1"><a class="header-anchor" href="#_3-2-canceler接口"><span>3.2 canceler接口</span></a></h3><p>canceler接口用于实现上下文取消功能：</p><figure><img src="'+x+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_4-context实现类型" tabindex="-1"><a class="header-anchor" href="#_4-context实现类型"><span>4. Context实现类型</span></a></h2><h3 id="_4-1-emptyctx" tabindex="-1"><a class="header-anchor" href="#_4-1-emptyctx"><span>4.1 emptyCtx</span></a></h3><p>emptyCtx是一个最基本的Context实现，它实际上只是一个int值：</p><figure><img src="'+d+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+f+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+_+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_4-2-cancelctx" tabindex="-1"><a class="header-anchor" href="#_4-2-cancelctx"><span>4.2 cancelCtx</span></a></h3><p>cancelCtx实现了可取消的Context：</p><figure><img src="'+m+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+h+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+u+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+y+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+C+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+b+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+k+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_4-3-timerctx" tabindex="-1"><a class="header-anchor" href="#_4-3-timerctx"><span>4.3 timerCtx</span></a></h3><p>timerCtx在cancelCtx的基础上增加了超时功能：</p><figure><img src="'+z+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+v+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+G+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h3 id="_4-4-valuectx" tabindex="-1"><a class="header-anchor" href="#_4-4-valuectx"><span>4.4 valueCtx</span></a></h3><p>valueCtx用于在Context中存储和传递键值对：</p><figure><img src="'+B+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+T+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><figure><img src="'+N+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><h2 id="_5-参考资料" tabindex="-1"><a class="header-anchor" href="#_5-参考资料"><span>5. 参考资料</span></a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/293666788" target="_blank" rel="noopener noreferrer">Go语言标准库context.go源码解读</a></li><li><a href="https://www.yuque.com/kryiea/qvod5u/mkais9kgik8ygtfa#KI8os" target="_blank" rel="noopener noreferrer">Context进阶</a></li></ul>',48))])}const F=e(S,[["render",D],["__file","context.html.vue"]]),R=JSON.parse('{"path":"/back-end/go/DataStructure/context.html","title":"Go语言Context详解","lang":"zh-CN","frontmatter":{"title":"Go语言Context详解","description":"详细介绍Go语言context包的使用方法、实现原理及最佳实践","date":"2024-01-01T00:00:00.000Z","category":["Go","并发编程"],"tag":["Go","Context","并发控制","超时控制"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/go/DataStructure/context.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"Go语言Context详解"}],["meta",{"property":"og:description","content":"详细介绍Go语言context包的使用方法、实现原理及最佳实践"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"Context"}],["meta",{"property":"article:tag","content":"并发控制"}],["meta",{"property":"article:tag","content":"超时控制"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言Context详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1. Context简介","slug":"_1-context简介","link":"#_1-context简介","children":[]},{"level":2,"title":"2. Context的底层实现","slug":"_2-context的底层实现","link":"#_2-context的底层实现","children":[{"level":3,"title":"2.1 接口定义","slug":"_2-1-接口定义","link":"#_2-1-接口定义","children":[]},{"level":3,"title":"2.2 实现类型","slug":"_2-2-实现类型","link":"#_2-2-实现类型","children":[]},{"level":3,"title":"2.3 提供的方法","slug":"_2-3-提供的方法","link":"#_2-3-提供的方法","children":[]}]},{"level":2,"title":"3. 接口详解","slug":"_3-接口详解","link":"#_3-接口详解","children":[{"level":3,"title":"3.1 Context接口","slug":"_3-1-context接口","link":"#_3-1-context接口","children":[]},{"level":3,"title":"3.2 canceler接口","slug":"_3-2-canceler接口","link":"#_3-2-canceler接口","children":[]}]},{"level":2,"title":"4. Context实现类型","slug":"_4-context实现类型","link":"#_4-context实现类型","children":[{"level":3,"title":"4.1 emptyCtx","slug":"_4-1-emptyctx","link":"#_4-1-emptyctx","children":[]},{"level":3,"title":"4.2 cancelCtx","slug":"_4-2-cancelctx","link":"#_4-2-cancelctx","children":[]},{"level":3,"title":"4.3 timerCtx","slug":"_4-3-timerctx","link":"#_4-3-timerctx","children":[]},{"level":3,"title":"4.4 valueCtx","slug":"_4-4-valuectx","link":"#_4-4-valuectx","children":[]}]},{"level":2,"title":"5. 参考资料","slug":"_5-参考资料","link":"#_5-参考资料","children":[]}],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":1.37,"words":411},"filePathRelative":"back-end/go/DataStructure/context.md","localizedDate":"2024年1月1日","excerpt":"<p>本文详细介绍Go语言Context的底层实现原理和使用方法。</p>\\n"}');export{F as comp,R as data};
