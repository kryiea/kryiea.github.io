import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as r,o}from"./app-CB9WG6K8.js";const a="/assets/redis%20%E8%83%BD%E5%AD%98%E5%A4%9A%E5%B0%91%E6%95%B0%E6%8D%AE.001-Ce_GRVyM.png",n="/assets/redis%20%E8%83%BD%E5%AD%98%E5%A4%9A%E5%B0%91%E6%95%B0%E6%8D%AE.002-B2abzaN9.png",l="/assets/redis%20%E8%83%BD%E5%AD%98%E5%A4%9A%E5%B0%91%E6%95%B0%E6%8D%AE.003-8ZFlbTQb.png",p="/assets/redis%20%E8%83%BD%E5%AD%98%E5%A4%9A%E5%B0%91%E6%95%B0%E6%8D%AE.004-DEeAIGt5.png",s={};function c(g,t){return o(),i("div",null,t[0]||(t[0]=[r('<p><strong>redis 能存多少数据</strong></p><p><strong>使用 maxmemory 配置</strong></p><ul><li>默认是注释的，也就是默认值为 0</li><li>32 位操作系统中，maxmemory 是 3G，因为最大支持 4GB 内存，系统本身需要一旦内存资源</li><li>64 位操作系统中，不会限制内存使用，也可以主动配置</li></ul><figure><img src="'+a+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p><strong>淘汰</strong></p><p>支持 &quot;多久淘汰&quot; 策略</p><figure><img src="'+n+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>当达到最大内存时，Redis如何选择要删除的内容。您可以从以下行为中选择一个：</p><ol><li>volatile-lru -&gt; 使用近似LRU进行驱逐，只针对带有过期时间的键。</li><li>allkeys-lru -&gt; 使用近似LRU对任何键进行驱逐。</li><li>volatile-lfu -&gt; 使用近似LFU进行驱逐，只针对带有过期时间的键。</li><li>allkeys-lfu -&gt; 使用近似LFU对任何键进行驱逐。</li><li>volatile-random -&gt; 移除具有过期时间的随机键。</li><li>allkeys-random -&gt; 移除任意键。</li><li>volatile-ttl -&gt; 移除最接近的过期时间(次级TTL)的键。</li><li>noeviction -&gt; 不驱逐任何东西，只是在写操作时返回错误。</li></ol><p>共 8 种策略</p><figure><img src="'+l+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><ul><li>默认是 noeviction：如果内存到达 maxmemory，则写入操作都会失败，不会淘汰已有数据</li><li>第二是多种淘汰策略</li></ul><figure><img src="'+p+'" alt="..." tabindex="0" loading="lazy"><figcaption>...</figcaption></figure><p>这四种策略，可以选择时 volatile，也就是设置了过期时间的 key，或者是 allkeys，即全部 key，所以一共有 8 种淘汰方式</p><p><strong>怎么选择淘汰算法</strong></p><p>由业务需求决定</p><p>缓存场景：LRU、LFU</p><p>数据重要：不淘汰</p><p><strong>淘汰时机</strong></p><p>每次运行读写命令都会调用processCommand函数，里面又会调用freeMemoryIfNeeded，这时候去尝试释放一些内存</p>',20)]))}const E=e(s,[["render",c],["__file","redis能存多少数据.html.vue"]]),y=JSON.parse('{"path":"/back-end/redis/Operating-principle/redis%E8%83%BD%E5%AD%98%E5%A4%9A%E5%B0%91%E6%95%B0%E6%8D%AE.html","title":"Redis数据存储容量分析","lang":"zh-CN","frontmatter":{"title":"Redis数据存储容量分析","description":"详细分析Redis的数据存储容量限制及优化方案","date":"2024-01-01T00:00:00.000Z","category":["数据库","Redis"],"tag":["Redis","存储容量","性能优化","内存管理"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/redis/Operating-principle/redis%E8%83%BD%E5%AD%98%E5%A4%9A%E5%B0%91%E6%95%B0%E6%8D%AE.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"Redis数据存储容量分析"}],["meta",{"property":"og:description","content":"详细分析Redis的数据存储容量限制及优化方案"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"存储容量"}],["meta",{"property":"article:tag","content":"性能优化"}],["meta",{"property":"article:tag","content":"内存管理"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis数据存储容量分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":1.69,"words":507},"filePathRelative":"back-end/redis/Operating-principle/redis能存多少数据.md","localizedDate":"2024年1月1日","excerpt":"<p><strong>redis 能存多少数据</strong></p>\\n<p><strong>使用 maxmemory 配置</strong></p>\\n<ul>\\n<li>默认是注释的，也就是默认值为 0</li>\\n<li>32 位操作系统中，maxmemory 是 3G，因为最大支持 4GB 内存，系统本身需要一旦内存资源</li>\\n<li>64 位操作系统中，不会限制内存使用，也可以主动配置</li>\\n</ul>\\n<figure><figcaption>...</figcaption></figure>\\n<p><strong>淘汰</strong></p>\\n<p>支持 \\"多久淘汰\\" 策略</p>"}');export{E as comp,y as data};
