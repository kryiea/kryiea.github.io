import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,d as e,e as l,o as t}from"./app-CB9WG6K8.js";const p={};function r(d,s){return t(),a("div",null,[s[0]||(s[0]=n("p",null,"本文详细介绍Go语言Kratos微服务框架的架构和使用方法。",-1)),e(" more "),s[1]||(s[1]=l(`<h2 id="_1-kratos项目结构" tabindex="-1"><a class="header-anchor" href="#_1-kratos项目结构"><span>1. Kratos项目结构</span></a></h2><p>Kratos使用<a href="https://github.com/go-kratos/kratos-layout" target="_blank" rel="noopener noreferrer">kratos-layout</a>作为项目模板，可以通过以下命令创建新项目：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">project-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-1-目录结构" tabindex="-1"><a class="header-anchor" href="#_1-1-目录结构"><span>1.1 目录结构</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── Dockerfile  </span></span>
<span class="line"><span>├── LICENSE</span></span>
<span class="line"><span>├── Makefile  </span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>├── api // 下面维护了微服务使用的proto文件以及根据它们所生成的go文件</span></span>
<span class="line"><span>│   └── helloworld</span></span>
<span class="line"><span>│       └── v1</span></span>
<span class="line"><span>│           ├── error_reason.pb.go</span></span>
<span class="line"><span>│           ├── error_reason.proto</span></span>
<span class="line"><span>│           ├── error_reason.swagger.json</span></span>
<span class="line"><span>│           ├── greeter.pb.go</span></span>
<span class="line"><span>│           ├── greeter.proto</span></span>
<span class="line"><span>│           ├── greeter.swagger.json</span></span>
<span class="line"><span>│           ├── greeter_grpc.pb.go</span></span>
<span class="line"><span>│           └── greeter_http.pb.go</span></span>
<span class="line"><span>├── cmd  // 整个项目启动的入口文件</span></span>
<span class="line"><span>│   └── server</span></span>
<span class="line"><span>│       ├── main.go</span></span>
<span class="line"><span>│       ├── wire.go  // 我们使用wire来维护依赖注入</span></span>
<span class="line"><span>│       └── wire_gen.go</span></span>
<span class="line"><span>├── configs  // 这里通常维护一些本地调试用的样例配置文件</span></span>
<span class="line"><span>│   └── config.yaml</span></span>
<span class="line"><span>├── generate.go</span></span>
<span class="line"><span>├── go.mod</span></span>
<span class="line"><span>├── go.sum</span></span>
<span class="line"><span>├── internal  // 该服务所有不对外暴露的代码，通常的业务逻辑都在这下面，使用internal避免错误引用</span></span>
<span class="line"><span>│   ├── biz   // 业务逻辑的组装层，类似 DDD 的 domain 层，data 类似 DDD 的 repo，而 repo 接口在这里定义，使用依赖倒置的原则。</span></span>
<span class="line"><span>│   │   ├── README.md</span></span>
<span class="line"><span>│   │   ├── biz.go</span></span>
<span class="line"><span>│   │   └── greeter.go</span></span>
<span class="line"><span>│   ├── conf  // 内部使用的config的结构定义，使用proto格式生成</span></span>
<span class="line"><span>│   │   ├── conf.pb.go</span></span>
<span class="line"><span>│   │   └── conf.proto</span></span>
<span class="line"><span>│   ├── data  // 业务数据访问，包含 cache、db 等封装，实现了 biz 的 repo 接口。我们可能会把 data 与 dao 混淆在一起，data 偏重业务的含义，它所要做的是将领域对象重新拿出来，我们去掉了 DDD 的 infra层。</span></span>
<span class="line"><span>│   │   ├── README.md</span></span>
<span class="line"><span>│   │   ├── data.go</span></span>
<span class="line"><span>│   │   └── greeter.go</span></span>
<span class="line"><span>│   ├── server  // http和grpc实例的创建和配置</span></span>
<span class="line"><span>│   │   ├── grpc.go</span></span>
<span class="line"><span>│   │   ├── http.go</span></span>
<span class="line"><span>│   │   └── server.go</span></span>
<span class="line"><span>│   └── service  // 实现了 api 定义的服务层，类似 DDD 的 application 层，处理 DTO 到 biz 领域实体的转换(DTO -&gt; DO)，同时协同各类 biz 交互，但是不应处理复杂逻辑</span></span>
<span class="line"><span>│       ├── README.md</span></span>
<span class="line"><span>│       ├── greeter.go</span></span>
<span class="line"><span>│       └── service.go</span></span>
<span class="line"><span>└── third_party  // api 依赖的第三方proto</span></span>
<span class="line"><span>    ├── README.md</span></span>
<span class="line"><span>    ├── google</span></span>
<span class="line"><span>    │   └── api</span></span>
<span class="line"><span>    │       ├── annotations.proto</span></span>
<span class="line"><span>    │       ├── http.proto</span></span>
<span class="line"><span>    │       └── httpbody.proto</span></span>
<span class="line"><span>    └── validate</span></span>
<span class="line"><span>        ├── README.md</span></span>
<span class="line"><span>        └── validate.proto</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-kratos项目初始化运行" tabindex="-1"><a class="header-anchor" href="#_2-kratos项目初始化运行"><span>2. Kratos项目初始化运行</span></a></h2><h3 id="_2-1-创建项目" tabindex="-1"><a class="header-anchor" href="#_2-1-创建项目"><span>2.1 创建项目</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">project-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-2-代码生成" tabindex="-1"><a class="header-anchor" href="#_2-2-代码生成"><span>2.2 代码生成</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成所有proto源码、wire等等</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> generate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-运行项目" tabindex="-1"><a class="header-anchor" href="#_2-3-运行项目"><span>2.3 运行项目</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行项目</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">INFO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> msg=config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> loaded:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config.yaml</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> format:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yaml</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 默认载入 configs/config.yaml 配置文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">INFO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> msg=[gRPC]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> listening</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [::]:9000 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># gRPC服务监听 9000 端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">INFO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> msg=[HTTP]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> listening</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [::]:8000 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># HTTP服务监听 8000 端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-kratos-cli工具使用" tabindex="-1"><a class="header-anchor" href="#_3-kratos-cli工具使用"><span>3. Kratos CLI工具使用</span></a></h2><h3 id="_3-1-安装与升级" tabindex="-1"><a class="header-anchor" href="#_3-1-安装与升级"><span>3.1 安装与升级</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装Kratos CLI</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github.com/go-kratos/kratos/cmd/kratos/v2@latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 升级Kratos</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upgrade</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-proto文件操作" tabindex="-1"><a class="header-anchor" href="#_3-2-proto文件操作"><span>3.2 Proto文件操作</span></a></h3><p>Kratos-layout项目中对proto文件进行了版本划分，放在了v1子目录下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加proto文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> proto</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> api/helloworld/v1/demo.proto</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成proto代码（在proto文件同目录下生成）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可以直接通过make命令生成</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> api</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 或使用kratos cli进行生成</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> proto</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> client</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> api/helloworld/v1/demo.proto</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成service代码，-t指定生成目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> proto</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> api/helloworld/v1/demo.proto</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> internal/service</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-3-常用命令"><span>3.3 常用命令</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行项目</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Kratos版本升级</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upgrade</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看帮助信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kratos</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20))])}const c=i(p,[["render",r],["__file","Kratos.html.vue"]]),o=JSON.parse('{"path":"/back-end/go/framework/MicroservicesFramework/Kratos.html","title":"Kratos微服务框架详解","lang":"zh-CN","frontmatter":{"title":"Kratos微服务框架详解","description":"详细介绍Go语言Kratos微服务框架的架构、使用方法及最佳实践","date":"2024-01-01T00:00:00.000Z","category":["Go","微服务","框架"],"tag":["Kratos","Go","微服务框架","服务架构"],"head":[["meta",{"property":"og:url","content":"https://kryiea.cn/back-end/go/framework/MicroservicesFramework/Kratos.html"}],["meta",{"property":"og:site_name","content":"🧐kryiea"}],["meta",{"property":"og:title","content":"Kratos微服务框架详解"}],["meta",{"property":"og:description","content":"详细介绍Go语言Kratos微服务框架的架构、使用方法及最佳实践"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T15:53:39.000Z"}],["meta",{"property":"article:tag","content":"Kratos"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"微服务框架"}],["meta",{"property":"article:tag","content":"服务架构"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T15:53:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kratos微服务框架详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T15:53:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kryiea\\",\\"url\\":\\"https://github.com/kryiea\\",\\"email\\":\\"kryieaa@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1. Kratos项目结构","slug":"_1-kratos项目结构","link":"#_1-kratos项目结构","children":[{"level":3,"title":"1.1 目录结构","slug":"_1-1-目录结构","link":"#_1-1-目录结构","children":[]}]},{"level":2,"title":"2. Kratos项目初始化运行","slug":"_2-kratos项目初始化运行","link":"#_2-kratos项目初始化运行","children":[{"level":3,"title":"2.1 创建项目","slug":"_2-1-创建项目","link":"#_2-1-创建项目","children":[]},{"level":3,"title":"2.2 代码生成","slug":"_2-2-代码生成","link":"#_2-2-代码生成","children":[]},{"level":3,"title":"2.3 运行项目","slug":"_2-3-运行项目","link":"#_2-3-运行项目","children":[]}]},{"level":2,"title":"3. Kratos CLI工具使用","slug":"_3-kratos-cli工具使用","link":"#_3-kratos-cli工具使用","children":[{"level":3,"title":"3.1 安装与升级","slug":"_3-1-安装与升级","link":"#_3-1-安装与升级","children":[]},{"level":3,"title":"3.2 Proto文件操作","slug":"_3-2-proto文件操作","link":"#_3-2-proto文件操作","children":[]},{"level":3,"title":"3.3 常用命令","slug":"_3-3-常用命令","link":"#_3-3-常用命令","children":[]}]}],"git":{"createdTime":1743436419000,"updatedTime":1743436419000,"contributors":[{"name":"kryiea","email":"1582877056@qq.com","commits":1}]},"readingTime":{"minutes":2.47,"words":740},"filePathRelative":"back-end/go/framework/MicroservicesFramework/Kratos.md","localizedDate":"2024年1月1日","excerpt":"<p>本文详细介绍Go语言Kratos微服务框架的架构和使用方法。</p>\\n"}');export{c as comp,o as data};
